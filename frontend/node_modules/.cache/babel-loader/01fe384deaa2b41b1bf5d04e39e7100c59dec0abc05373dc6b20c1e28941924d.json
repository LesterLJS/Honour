{"ast":null,"code":"/**\r\n * Constructs a consistent IPFS URL for a given hash\r\n * @param {string} hash - The IPFS hash/CID\r\n * @param {boolean} useLocalGateway - Whether to use the local gateway (default: true)\r\n * @returns {string} - The complete IPFS URL\r\n */\nexport const getIpfsUrl = (hash, useLocalGateway = true) => {\n  if (!hash) return '';\n\n  // Use local gateway for development, public gateway for production\n  const gateway = useLocalGateway ? 'http://localhost:8080/ipfs/' : 'https://ipfs.io/ipfs/';\n  return `${gateway}${hash}`;\n};\n\n/**\r\n * Get alternative IPFS URLs for a given hash\r\n * @param {string} hash - The IPFS hash/CID\r\n * @returns {Array} - Array of IPFS URLs using different gateways\r\n */\nexport const getAlternativeIpfsUrls = hash => {\n  if (!hash) return [];\n  return [`http://localhost:8080/ipfs/${hash}`, `https://ipfs.io/ipfs/${hash}`, `https://gateway.ipfs.io/ipfs/${hash}`, `https://dweb.link/ipfs/${hash}`];\n};\n\n/**\r\n * Checks if an image URL is accessible\r\n * @param {string} url - The URL to check\r\n * @returns {Promise<boolean>} - Promise resolving to true if accessible, false otherwise\r\n */\nexport const isImageAccessible = url => {\n  return new Promise(resolve => {\n    const img = new Image();\n    img.onload = () => resolve(true);\n    img.onerror = () => resolve(false);\n    img.src = url;\n\n    // Set a timeout to resolve false if the image takes too long to load\n    setTimeout(() => resolve(false), 5000);\n  });\n};\n\n/**\r\n * Get the best available IPFS URL for an image\r\n * @param {string} hash - The IPFS hash/CID\r\n * @returns {Promise<string>} - Promise resolving to the best available URL\r\n */\nexport const getBestIpfsUrl = async hash => {\n  if (!hash) return '';\n\n  // Try local gateway first\n  const localUrl = `http://localhost:8080/ipfs/${hash}`;\n  const isLocalAccessible = await isImageAccessible(localUrl);\n  if (isLocalAccessible) {\n    return localUrl;\n  }\n\n  // Fall back to public gateway\n  return `https://ipfs.io/ipfs/${hash}`;\n};","map":{"version":3,"names":["getIpfsUrl","hash","useLocalGateway","gateway","getAlternativeIpfsUrls","isImageAccessible","url","Promise","resolve","img","Image","onload","onerror","src","setTimeout","getBestIpfsUrl","localUrl","isLocalAccessible"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/util/ipfs.js"],"sourcesContent":["/**\r\n * Constructs a consistent IPFS URL for a given hash\r\n * @param {string} hash - The IPFS hash/CID\r\n * @param {boolean} useLocalGateway - Whether to use the local gateway (default: true)\r\n * @returns {string} - The complete IPFS URL\r\n */\r\nexport const getIpfsUrl = (hash, useLocalGateway = true) => {\r\n  if (!hash) return '';\r\n  \r\n  // Use local gateway for development, public gateway for production\r\n  const gateway = useLocalGateway \r\n    ? 'http://localhost:8080/ipfs/' \r\n    : 'https://ipfs.io/ipfs/';\r\n    \r\n  return `${gateway}${hash}`;\r\n};\r\n\r\n/**\r\n * Get alternative IPFS URLs for a given hash\r\n * @param {string} hash - The IPFS hash/CID\r\n * @returns {Array} - Array of IPFS URLs using different gateways\r\n */\r\nexport const getAlternativeIpfsUrls = (hash) => {\r\n  if (!hash) return [];\r\n  \r\n  return [\r\n    `http://localhost:8080/ipfs/${hash}`,\r\n    `https://ipfs.io/ipfs/${hash}`,\r\n    `https://gateway.ipfs.io/ipfs/${hash}`,\r\n    `https://dweb.link/ipfs/${hash}`\r\n  ];\r\n};\r\n\r\n/**\r\n * Checks if an image URL is accessible\r\n * @param {string} url - The URL to check\r\n * @returns {Promise<boolean>} - Promise resolving to true if accessible, false otherwise\r\n */\r\nexport const isImageAccessible = (url) => {\r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    img.onload = () => resolve(true);\r\n    img.onerror = () => resolve(false);\r\n    img.src = url;\r\n    \r\n    // Set a timeout to resolve false if the image takes too long to load\r\n    setTimeout(() => resolve(false), 5000);\r\n  });\r\n};\r\n\r\n/**\r\n * Get the best available IPFS URL for an image\r\n * @param {string} hash - The IPFS hash/CID\r\n * @returns {Promise<string>} - Promise resolving to the best available URL\r\n */\r\nexport const getBestIpfsUrl = async (hash) => {\r\n  if (!hash) return '';\r\n  \r\n  // Try local gateway first\r\n  const localUrl = `http://localhost:8080/ipfs/${hash}`;\r\n  const isLocalAccessible = await isImageAccessible(localUrl);\r\n  \r\n  if (isLocalAccessible) {\r\n    return localUrl;\r\n  }\r\n  \r\n  // Fall back to public gateway\r\n  return `https://ipfs.io/ipfs/${hash}`;\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAGA,CAACC,IAAI,EAAEC,eAAe,GAAG,IAAI,KAAK;EAC1D,IAAI,CAACD,IAAI,EAAE,OAAO,EAAE;;EAEpB;EACA,MAAME,OAAO,GAAGD,eAAe,GAC3B,6BAA6B,GAC7B,uBAAuB;EAE3B,OAAO,GAAGC,OAAO,GAAGF,IAAI,EAAE;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,sBAAsB,GAAIH,IAAI,IAAK;EAC9C,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EAEpB,OAAO,CACL,8BAA8BA,IAAI,EAAE,EACpC,wBAAwBA,IAAI,EAAE,EAC9B,gCAAgCA,IAAI,EAAE,EACtC,0BAA0BA,IAAI,EAAE,CACjC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,iBAAiB,GAAIC,GAAG,IAAK;EACxC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9B,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;IACvBD,GAAG,CAACE,MAAM,GAAG,MAAMH,OAAO,CAAC,IAAI,CAAC;IAChCC,GAAG,CAACG,OAAO,GAAG,MAAMJ,OAAO,CAAC,KAAK,CAAC;IAClCC,GAAG,CAACI,GAAG,GAAGP,GAAG;;IAEb;IACAQ,UAAU,CAAC,MAAMN,OAAO,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;EACxC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,cAAc,GAAG,MAAOd,IAAI,IAAK;EAC5C,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;;EAEpB;EACA,MAAMe,QAAQ,GAAG,8BAA8Bf,IAAI,EAAE;EACrD,MAAMgB,iBAAiB,GAAG,MAAMZ,iBAAiB,CAACW,QAAQ,CAAC;EAE3D,IAAIC,iBAAiB,EAAE;IACrB,OAAOD,QAAQ;EACjB;;EAEA;EACA,OAAO,wBAAwBf,IAAI,EAAE;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}