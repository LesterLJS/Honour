{"ast":null,"code":"import api from '../api/index'; // Importing the api instance\n\n// Existing functions...\n\n/**\r\n * Load an image with authentication using the configured Axios instance\r\n * @param {string} imageId - The ID of the image to load\r\n * @returns {Promise<string>} - A promise that resolves to the Blob URL of the image\r\n */\nexport const loadImageWithAuth = async imageId => {\n  try {\n    // Fetch the image with the configured Axios instance\n    const response = await api.get(`/api/images/${imageId}/file/`, {\n      responseType: 'blob' // Expecting binary data\n    });\n\n    // Create Blob URL\n    const blob = new Blob([response.data], {\n      type: response.headers['content-type']\n    });\n    return URL.createObjectURL(blob);\n  } catch (error) {\n    console.error(`Error loading image ${imageId}:`, error);\n    return ''; // Return empty string on failure\n  }\n};\n\n// Existing functions...","map":{"version":3,"names":["api","loadImageWithAuth","imageId","response","get","responseType","blob","Blob","data","type","headers","URL","createObjectURL","error","console"],"sources":["F:/MyProject/frontend/src/api/images.js"],"sourcesContent":["import api from '../api/index'; // Importing the api instance\r\n\r\n// Existing functions...\r\n\r\n/**\r\n * Load an image with authentication using the configured Axios instance\r\n * @param {string} imageId - The ID of the image to load\r\n * @returns {Promise<string>} - A promise that resolves to the Blob URL of the image\r\n */\r\nexport const loadImageWithAuth = async (imageId) => {\r\n  try {\r\n    // Fetch the image with the configured Axios instance\r\n    const response = await api.get(`/api/images/${imageId}/file/`, {\r\n      responseType: 'blob' // Expecting binary data\r\n    });\r\n\r\n    // Create Blob URL\r\n    const blob = new Blob([response.data], { \r\n      type: response.headers['content-type'] \r\n    });\r\n    return URL.createObjectURL(blob);\r\n  } catch (error) {\r\n    console.error(`Error loading image ${imageId}:`, error);\r\n    return ''; // Return empty string on failure\r\n  }\r\n};\r\n\r\n// Existing functions...\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,cAAc,CAAC,CAAC;;AAEhC;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,OAAO,IAAK;EAClD,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,eAAeF,OAAO,QAAQ,EAAE;MAC7DG,YAAY,EAAE,MAAM,CAAC;IACvB,CAAC,CAAC;;IAEF;IACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACJ,QAAQ,CAACK,IAAI,CAAC,EAAE;MACrCC,IAAI,EAAEN,QAAQ,CAACO,OAAO,CAAC,cAAc;IACvC,CAAC,CAAC;IACF,OAAOC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;EAClC,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuBX,OAAO,GAAG,EAAEW,KAAK,CAAC;IACvD,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC;;AAED","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}