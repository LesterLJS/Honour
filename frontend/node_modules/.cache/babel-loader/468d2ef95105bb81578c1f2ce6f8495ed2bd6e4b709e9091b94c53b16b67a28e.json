{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Erwachens\\\\Desktop\\\\MyProject\\\\frontend\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { useImages } from '../context/ImageContext';\nimport Navbar from '../components/common/Navbar';\nimport { normalizeIpfsHash } from '../util/ipfs';\n\n// Local IPFS gateway URL\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LOCAL_GATEWAY = 'http://127.0.0.1:8080/ipfs/';\n\n// Function to get IPFS URL from hash\nconst getIpfsUrl = hash => {\n  const normalizedHash = normalizeIpfsHash(hash);\n  if (!normalizedHash) return '';\n  return `${LOCAL_GATEWAY}${normalizedHash}`;\n};\nconst Dashboard = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const {\n    myImages,\n    loading,\n    error,\n    pagination,\n    getMyImages,\n    getImageDownloadLink,\n    downloadImageFile,\n    nextPage,\n    previousPage,\n    goToPage\n  } = useImages();\n\n  // Add state to track loading status of individual images\n  const [imageLoadingStates, setImageLoadingStates] = useState({});\n\n  // Enhanced queue for limiting concurrent API requests with retry and backoff\n  const requestQueue = React.useRef({\n    queue: [],\n    running: 0,\n    maxConcurrent: 2,\n    // Limit to 2 concurrent requests\n    maxRetries: 3,\n    // Maximum number of retries per request\n\n    add(fn, priority = false, retryCount = 0) {\n      const queueItem = {\n        fn,\n        retryCount\n      };\n\n      // Add high priority items to the front of the queue\n      if (priority) {\n        this.queue.unshift(queueItem);\n      } else {\n        this.queue.push(queueItem);\n      }\n      this.processQueue();\n    },\n    async processQueue() {\n      if (this.running >= this.maxConcurrent || this.queue.length === 0) {\n        return;\n      }\n      this.running++;\n      const {\n        fn,\n        retryCount\n      } = this.queue.shift();\n      try {\n        await fn();\n      } catch (error) {\n        console.error(\"Error in queue processing:\", error);\n\n        // Implement retry with exponential backoff\n        if (retryCount < this.maxRetries) {\n          console.log(`Retrying request (attempt ${retryCount + 1} of ${this.maxRetries})...`);\n\n          // Calculate backoff delay: 2^retryCount * 1000ms (1s, 2s, 4s, etc.)\n          const backoffDelay = Math.min(Math.pow(2, retryCount) * 1000, 10000);\n          setTimeout(() => {\n            // Re-add the failed request to the queue with increased retry count\n            this.add(fn, false, retryCount + 1);\n          }, backoffDelay);\n        }\n      } finally {\n        this.running--;\n\n        // Add a small delay between requests to prevent overwhelming the server\n        setTimeout(() => {\n          this.processQueue();\n        }, 100);\n      }\n    },\n    // Clear the queue (useful when component unmounts)\n    clear() {\n      this.queue = [];\n    }\n  });\n\n  // Reference to track if the component is mounted\n  const isMounted = React.useRef(true);\n\n  // Clear the request queue when component unmounts\n  useEffect(() => {\n    // Store a reference to the current queue for cleanup\n    const currentQueue = requestQueue.current;\n    return () => {\n      isMounted.current = false;\n      currentQueue.clear();\n    };\n  }, []);\n\n  // Fetch user's images when component mounts or pagination changes\n  useEffect(() => {\n    // Skip initial render if pagination is at default values\n    if (pagination.currentPage === 1 && pagination.pageSize === 9 && myImages.length > 0) {\n      return;\n    }\n\n    // Fetch user's images and preload them\n    const loadAndPreloadImages = async () => {\n      if (!isMounted.current) return;\n      try {\n        // Load the current page of images\n        const response = await getMyImages(pagination.currentPage, pagination.pageSize);\n        if (!isMounted.current) return;\n        const images = response.results || [];\n        console.log(`Loaded ${images.length} images for page ${pagination.currentPage}`);\n\n        // Preload images sequentially using the request queue to limit concurrent requests\n        // Only preload visible images to reduce unnecessary requests\n        images.forEach(image => {\n          if (!isMounted.current) return;\n          requestQueue.current.add(async () => {\n            if (!isMounted.current) return;\n            setImageLoadingStates(prev => ({\n              ...prev,\n              [image.id]: true\n            }));\n            try {\n              await getImageDownloadLink(image.id);\n              if (!isMounted.current) return;\n              console.log(`Preloaded image ${image.id}`);\n            } catch (err) {\n              if (!isMounted.current) return;\n              console.error(`Failed to preload image ${image.id}:`, err);\n            } finally {\n              if (isMounted.current) {\n                setImageLoadingStates(prev => ({\n                  ...prev,\n                  [image.id]: false\n                }));\n              }\n            }\n          });\n        });\n      } catch (err) {\n        if (!isMounted.current) return;\n        console.error('Failed to load images:', err);\n      }\n    };\n    loadAndPreloadImages();\n\n    // Cleanup function to cancel any pending operations if the dependencies change\n    // Store a reference to the current queue for cleanup\n    const currentQueue = requestQueue.current;\n    return () => {\n      // We don't need to set isMounted to false here as this is just a dependency change\n      // But we should clear the queue to prevent stale requests\n      currentQueue.clear();\n    };\n  }, [pagination.currentPage, pagination.pageSize, getImageDownloadLink, getMyImages\n  // Removed myImages.length from dependencies to prevent infinite loop\n  ]); // Include all dependencies used in the effect\n\n  // eslint-disable-next-line no-unused-vars\n  const handleDownload = async imageId => {\n    try {\n      // First try the direct download method\n      console.log(`Attempting direct download for image ${imageId}`);\n      setImageLoadingStates(prev => ({\n        ...prev,\n        [imageId]: true\n      }));\n      const directResult = await downloadImageFile(imageId);\n      if (directResult.success) {\n        console.log(`Direct download successful for image ${imageId}`);\n\n        // If we got an objectUrl (blob), create a download link\n        if (directResult.objectUrl) {\n          // Create a temporary anchor element to trigger download\n          const link = document.createElement('a');\n          link.href = directResult.objectUrl;\n          link.setAttribute('download', `image-${imageId}.jpg`);\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n\n          // Clean up the object URL to avoid memory leaks\n          setTimeout(() => URL.revokeObjectURL(directResult.objectUrl), 100);\n          console.log(`Download initiated for image ${imageId} using blob`);\n        }\n        // If we got a fallback URL, open it in a new tab\n        else if (directResult.url) {\n          window.open(directResult.url, '_blank');\n          console.log(`Download initiated for image ${imageId} using fallback URL`);\n        }\n      } else {\n        // If direct download failed, fall back to the old method\n        console.log(`Direct download failed for image ${imageId}, falling back to link method`);\n        const response = await getImageDownloadLink(imageId);\n        console.log(`Download link response for image ${imageId}:`, response);\n\n        // Get the image from our state\n        const image = myImages.find(img => img.id === imageId);\n        if (!image) {\n          console.error(`Image ${imageId} not found in state`);\n          return;\n        }\n\n        // Get the best available URL (local or public)\n        let downloadUrl;\n        if (response.data && response.data.ipfsUrls && response.data.ipfsUrls.local) {\n          downloadUrl = response.data.ipfsUrls.local;\n          console.log(`Using local URL from response: ${downloadUrl}`);\n        } else if (response.data && response.data.ipfsUrl) {\n          // Fallback to the original URL if the new structure isn't available\n          downloadUrl = response.data.ipfsUrl;\n          console.log(`Using original URL from response: ${downloadUrl}`);\n        } else {\n          // If no URL is available, construct one from the hash using our utility\n          const hash = response.data && response.data.ipfsHash || image.ipfs_hash;\n          downloadUrl = getIpfsUrl(hash);\n          console.log(`Constructed URL from hash: ${downloadUrl}`);\n        }\n\n        // Create a temporary anchor element to trigger download\n        const link = document.createElement('a');\n        link.href = downloadUrl;\n        link.setAttribute('download', `image-${imageId}.jpg`);\n        link.setAttribute('target', '_blank');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        console.log(`Download initiated for image ${imageId} using fallback method`);\n      }\n    } catch (err) {\n      console.error('Failed to download image:', err);\n      alert('Failed to download image. Please try again later.');\n    } finally {\n      setImageLoadingStates(prev => ({\n        ...prev,\n        [imageId]: false\n      }));\n    }\n  };\n  const handleRefreshImage = async image => {\n    // Set loading state\n    setImageLoadingStates(prev => ({\n      ...prev,\n      [image.id]: true\n    }));\n    try {\n      // Attempt to refresh the image by getting a new download link\n      await getImageDownloadLink(image.id);\n      console.log(`Successfully refreshed image ${image.id}`);\n    } catch (err) {\n      console.error(`Error refreshing image ${image.id}:`, err);\n    } finally {\n      setImageLoadingStates(prev => ({\n        ...prev,\n        [image.id]: false\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Welcome, \", user === null || user === void 0 ? void 0 : user.username, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Role: \", user === null || user === void 0 ? void 0 : user.role]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/upload\",\n            className: \"btn\",\n            children: \"Upload New Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/analytics\",\n            className: \"btn\",\n            style: {\n              marginLeft: '10px'\n            },\n            children: \"Analytics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), (user === null || user === void 0 ? void 0 : user.role) === 'admin' && /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: '30px'\n        },\n        children: \"My Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this), !loading && myImages.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You haven't uploaded any images yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-grid\",\n        style: {\n          marginBottom: '20px'\n        },\n        children: myImages.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'relative'\n            },\n            children: [imageLoadingStates[image.id] ? /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: '100%',\n                height: '200px',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: '#f0f0f0',\n                borderTopLeftRadius: '8px',\n                borderTopRightRadius: '8px'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"spinner\",\n                style: {\n                  width: '40px',\n                  height: '40px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n              id: `img-${image.id}`,\n              src: getIpfsUrl(image.ipfs_hash),\n              alt: `ID: ${image.id}`,\n              style: {\n                width: '100%',\n                height: '200px',\n                objectFit: 'cover',\n                borderTopLeftRadius: '8px',\n                borderTopRightRadius: '8px'\n              },\n              onError: e => {\n                console.log(`Image ${image.id} failed to load, attempting to recover...`);\n\n                // Set loading state\n                setImageLoadingStates(prev => ({\n                  ...prev,\n                  [image.id]: true\n                }));\n\n                // Call the refresh image function to attempt recovery\n                handleRefreshImage(image);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                position: 'absolute',\n                top: '5px',\n                right: '5px',\n                background: 'rgba(255, 255, 255, 0.7)',\n                border: 'none',\n                borderRadius: '50%',\n                width: '30px',\n                height: '30px',\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              },\n              onClick: () => handleRefreshImage(image),\n              title: \"Refresh image\",\n              disabled: imageLoadingStates[image.id],\n              children: imageLoadingStates[image.id] ? '⌛' : '↻'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Image #\", image.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Hash: \", image.sha256_hash.substring(0, 10), \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Uploaded: \", new Date(image.uploaded_at).toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Deepfake: \", image.deepfake_label, \" (\", Math.round(image.deepfake_confidence * 100), \"%)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this)]\n        }, image.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), !loading && myImages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-controls\",\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          margin: '20px 0 40px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: previousPage,\n          disabled: !pagination.hasPrevious,\n          style: {\n            margin: '0 5px',\n            opacity: pagination.hasPrevious ? 1 : 0.5,\n            cursor: pagination.hasPrevious ? 'pointer' : 'not-allowed'\n          },\n          children: \"\\xAB Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: '0 15px'\n          },\n          children: Array.from({\n            length: pagination.totalPages\n          }, (_, i) => i + 1).map(page => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => goToPage(page),\n            style: {\n              margin: '0 5px',\n              padding: '5px 10px',\n              border: page === pagination.currentPage ? '2px solid #007bff' : '1px solid #ccc',\n              borderRadius: '4px',\n              background: page === pagination.currentPage ? '#e6f2ff' : 'white',\n              cursor: 'pointer'\n            },\n            children: page\n          }, page, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: nextPage,\n          disabled: !pagination.hasNext,\n          style: {\n            margin: '0 5px',\n            opacity: pagination.hasNext ? 1 : 0.5,\n            cursor: pagination.hasNext ? 'pointer' : 'not-allowed'\n          },\n          children: \"Next \\xBB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }, this), !loading && myImages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          marginBottom: '30px',\n          color: '#666'\n        },\n        children: [\"Showing page \", pagination.currentPage, \" of \", pagination.totalPages, \" (\", pagination.totalImages, \" total images)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"lfCs60c4Yi/jkSkbAqJq8gI5NVE=\", false, function () {\n  return [useAuth, useImages];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","Link","useAuth","useImages","Navbar","normalizeIpfsHash","jsxDEV","_jsxDEV","Fragment","_Fragment","LOCAL_GATEWAY","getIpfsUrl","hash","normalizedHash","Dashboard","_s","user","myImages","loading","error","pagination","getMyImages","getImageDownloadLink","downloadImageFile","nextPage","previousPage","goToPage","imageLoadingStates","setImageLoadingStates","requestQueue","useRef","queue","running","maxConcurrent","maxRetries","add","fn","priority","retryCount","queueItem","unshift","push","processQueue","length","shift","console","log","backoffDelay","Math","min","pow","setTimeout","clear","isMounted","currentQueue","current","currentPage","pageSize","loadAndPreloadImages","response","images","results","forEach","image","prev","id","err","handleDownload","imageId","directResult","success","objectUrl","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","URL","revokeObjectURL","url","window","open","find","img","downloadUrl","data","ipfsUrls","local","ipfsUrl","ipfsHash","ipfs_hash","alert","handleRefreshImage","children","fileName","_jsxFileName","lineNumber","columnNumber","className","username","role","style","marginTop","to","marginLeft","marginBottom","map","position","width","height","display","alignItems","justifyContent","backgroundColor","borderTopLeftRadius","borderTopRightRadius","src","alt","objectFit","onError","e","top","right","background","border","borderRadius","cursor","onClick","title","disabled","sha256_hash","substring","Date","uploaded_at","toLocaleString","deepfake_label","round","deepfake_confidence","margin","hasPrevious","opacity","Array","from","totalPages","_","i","page","padding","hasNext","textAlign","color","totalImages","_c","$RefreshReg$"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/pages/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { useImages } from '../context/ImageContext';\r\nimport Navbar from '../components/common/Navbar';\r\nimport { normalizeIpfsHash } from '../util/ipfs';\r\n\r\n// Local IPFS gateway URL\r\nconst LOCAL_GATEWAY = 'http://127.0.0.1:8080/ipfs/';\r\n\r\n// Function to get IPFS URL from hash\r\nconst getIpfsUrl = (hash) => {\r\n  const normalizedHash = normalizeIpfsHash(hash);\r\n  if (!normalizedHash) return '';\r\n  return `${LOCAL_GATEWAY}${normalizedHash}`;\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const { user } = useAuth();\r\n  const { \r\n    myImages, \r\n    loading, \r\n    error, \r\n    pagination,\r\n    getMyImages, \r\n    getImageDownloadLink,\r\n    downloadImageFile,\r\n    nextPage,\r\n    previousPage,\r\n    goToPage\r\n  } = useImages();\r\n\r\n  // Add state to track loading status of individual images\r\n  const [imageLoadingStates, setImageLoadingStates] = useState({});\r\n\r\n  // Enhanced queue for limiting concurrent API requests with retry and backoff\r\n  const requestQueue = React.useRef({\r\n    queue: [],\r\n    running: 0,\r\n    maxConcurrent: 2, // Limit to 2 concurrent requests\r\n    maxRetries: 3,    // Maximum number of retries per request\r\n    \r\n    add(fn, priority = false, retryCount = 0) {\r\n      const queueItem = { fn, retryCount };\r\n      \r\n      // Add high priority items to the front of the queue\r\n      if (priority) {\r\n        this.queue.unshift(queueItem);\r\n      } else {\r\n        this.queue.push(queueItem);\r\n      }\r\n      \r\n      this.processQueue();\r\n    },\r\n    \r\n    async processQueue() {\r\n      if (this.running >= this.maxConcurrent || this.queue.length === 0) {\r\n        return;\r\n      }\r\n      \r\n      this.running++;\r\n      const { fn, retryCount } = this.queue.shift();\r\n      \r\n      try {\r\n        await fn();\r\n      } catch (error) {\r\n        console.error(\"Error in queue processing:\", error);\r\n        \r\n        // Implement retry with exponential backoff\r\n        if (retryCount < this.maxRetries) {\r\n          console.log(`Retrying request (attempt ${retryCount + 1} of ${this.maxRetries})...`);\r\n          \r\n          // Calculate backoff delay: 2^retryCount * 1000ms (1s, 2s, 4s, etc.)\r\n          const backoffDelay = Math.min(Math.pow(2, retryCount) * 1000, 10000);\r\n          \r\n          setTimeout(() => {\r\n            // Re-add the failed request to the queue with increased retry count\r\n            this.add(fn, false, retryCount + 1);\r\n          }, backoffDelay);\r\n        }\r\n      } finally {\r\n        this.running--;\r\n        \r\n        // Add a small delay between requests to prevent overwhelming the server\r\n        setTimeout(() => {\r\n          this.processQueue();\r\n        }, 100);\r\n      }\r\n    },\r\n    \r\n    // Clear the queue (useful when component unmounts)\r\n    clear() {\r\n      this.queue = [];\r\n    }\r\n  });\r\n\r\n  // Reference to track if the component is mounted\r\n  const isMounted = React.useRef(true);\r\n  \r\n  // Clear the request queue when component unmounts\r\n  useEffect(() => {\r\n    // Store a reference to the current queue for cleanup\r\n    const currentQueue = requestQueue.current;\r\n    \r\n    return () => {\r\n      isMounted.current = false;\r\n      currentQueue.clear();\r\n    };\r\n  }, []);\r\n  \r\n  // Fetch user's images when component mounts or pagination changes\r\n  useEffect(() => {\r\n    // Skip initial render if pagination is at default values\r\n    if (pagination.currentPage === 1 && pagination.pageSize === 9 && myImages.length > 0) {\r\n      return;\r\n    }\r\n    \r\n    // Fetch user's images and preload them\r\n    const loadAndPreloadImages = async () => {\r\n      if (!isMounted.current) return;\r\n      \r\n      try {\r\n        // Load the current page of images\r\n        const response = await getMyImages(pagination.currentPage, pagination.pageSize);\r\n        if (!isMounted.current) return;\r\n        \r\n        const images = response.results || [];\r\n        console.log(`Loaded ${images.length} images for page ${pagination.currentPage}`);\r\n        \r\n        // Preload images sequentially using the request queue to limit concurrent requests\r\n        // Only preload visible images to reduce unnecessary requests\r\n        images.forEach(image => {\r\n          if (!isMounted.current) return;\r\n          \r\n          requestQueue.current.add(async () => {\r\n            if (!isMounted.current) return;\r\n            \r\n            setImageLoadingStates(prev => ({ ...prev, [image.id]: true }));\r\n            try {\r\n              await getImageDownloadLink(image.id);\r\n              if (!isMounted.current) return;\r\n              \r\n              console.log(`Preloaded image ${image.id}`);\r\n            } catch (err) {\r\n              if (!isMounted.current) return;\r\n              console.error(`Failed to preload image ${image.id}:`, err);\r\n            } finally {\r\n              if (isMounted.current) {\r\n                setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n              }\r\n            }\r\n          });\r\n        });\r\n      } catch (err) {\r\n        if (!isMounted.current) return;\r\n        console.error('Failed to load images:', err);\r\n      }\r\n    };\r\n    \r\n    loadAndPreloadImages();\r\n    \r\n    // Cleanup function to cancel any pending operations if the dependencies change\r\n    // Store a reference to the current queue for cleanup\r\n    const currentQueue = requestQueue.current;\r\n    \r\n    return () => {\r\n      // We don't need to set isMounted to false here as this is just a dependency change\r\n      // But we should clear the queue to prevent stale requests\r\n      currentQueue.clear();\r\n    };\r\n  }, [\r\n    pagination.currentPage,\r\n    pagination.pageSize,\r\n    getImageDownloadLink,\r\n    getMyImages\r\n    // Removed myImages.length from dependencies to prevent infinite loop\r\n  ]); // Include all dependencies used in the effect\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const handleDownload = async (imageId) => {\r\n    try {\r\n      // First try the direct download method\r\n      console.log(`Attempting direct download for image ${imageId}`);\r\n      setImageLoadingStates(prev => ({ ...prev, [imageId]: true }));\r\n      \r\n      const directResult = await downloadImageFile(imageId);\r\n      \r\n      if (directResult.success) {\r\n        console.log(`Direct download successful for image ${imageId}`);\r\n        \r\n        // If we got an objectUrl (blob), create a download link\r\n        if (directResult.objectUrl) {\r\n          // Create a temporary anchor element to trigger download\r\n          const link = document.createElement('a');\r\n          link.href = directResult.objectUrl;\r\n          link.setAttribute('download', `image-${imageId}.jpg`);\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          document.body.removeChild(link);\r\n          \r\n          // Clean up the object URL to avoid memory leaks\r\n          setTimeout(() => URL.revokeObjectURL(directResult.objectUrl), 100);\r\n          \r\n          console.log(`Download initiated for image ${imageId} using blob`);\r\n        } \r\n        // If we got a fallback URL, open it in a new tab\r\n        else if (directResult.url) {\r\n          window.open(directResult.url, '_blank');\r\n          console.log(`Download initiated for image ${imageId} using fallback URL`);\r\n        }\r\n      } else {\r\n        // If direct download failed, fall back to the old method\r\n        console.log(`Direct download failed for image ${imageId}, falling back to link method`);\r\n        \r\n        const response = await getImageDownloadLink(imageId);\r\n        console.log(`Download link response for image ${imageId}:`, response);\r\n        \r\n        // Get the image from our state\r\n        const image = myImages.find(img => img.id === imageId);\r\n        if (!image) {\r\n          console.error(`Image ${imageId} not found in state`);\r\n          return;\r\n        }\r\n        \r\n        // Get the best available URL (local or public)\r\n        let downloadUrl;\r\n        if (response.data && response.data.ipfsUrls && response.data.ipfsUrls.local) {\r\n          downloadUrl = response.data.ipfsUrls.local;\r\n          console.log(`Using local URL from response: ${downloadUrl}`);\r\n        } else if (response.data && response.data.ipfsUrl) {\r\n          // Fallback to the original URL if the new structure isn't available\r\n          downloadUrl = response.data.ipfsUrl;\r\n          console.log(`Using original URL from response: ${downloadUrl}`);\r\n        } else {\r\n          // If no URL is available, construct one from the hash using our utility\r\n          const hash = (response.data && response.data.ipfsHash) || image.ipfs_hash;\r\n          downloadUrl = getIpfsUrl(hash);\r\n          console.log(`Constructed URL from hash: ${downloadUrl}`);\r\n        }\r\n        \r\n        // Create a temporary anchor element to trigger download\r\n        const link = document.createElement('a');\r\n        link.href = downloadUrl;\r\n        link.setAttribute('download', `image-${imageId}.jpg`);\r\n        link.setAttribute('target', '_blank');\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        \r\n        console.log(`Download initiated for image ${imageId} using fallback method`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to download image:', err);\r\n      alert('Failed to download image. Please try again later.');\r\n    } finally {\r\n      setImageLoadingStates(prev => ({ ...prev, [imageId]: false }));\r\n    }\r\n  };\r\n\r\n  const handleRefreshImage = async (image) => {\r\n    // Set loading state\r\n    setImageLoadingStates(prev => ({ ...prev, [image.id]: true }));\r\n    \r\n    try {\r\n      // Attempt to refresh the image by getting a new download link\r\n      await getImageDownloadLink(image.id);\r\n      console.log(`Successfully refreshed image ${image.id}`);\r\n    } catch (err) {\r\n      console.error(`Error refreshing image ${image.id}:`, err);\r\n    } finally {\r\n      setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      \r\n      <div className=\"container\">\r\n        <div className=\"card\">\r\n          <h2>Welcome, {user?.username}!</h2>\r\n          <p>Role: {user?.role}</p>\r\n          \r\n          <div style={{ marginTop: '20px' }}>\r\n            <Link to=\"/upload\" className=\"btn\">Upload New Image</Link>\r\n            \r\n            <Link to=\"/analytics\" className=\"btn\" style={{ marginLeft: '10px' }}>Analytics</Link>\r\n\r\n            {user?.role === 'admin' && (\r\n              <>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        <h3 style={{ marginTop: '30px' }}>My Images</h3>\r\n        \r\n        {loading && (\r\n          <div className=\"spinner\"></div>\r\n        )}\r\n        \r\n        {error && (\r\n          <div className=\"alert alert-danger\">{error}</div>\r\n        )}\r\n        \r\n        {!loading && myImages.length === 0 && (\r\n          <div className=\"card\">\r\n            <p>You haven't uploaded any images yet.</p>\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"image-grid\" style={{ marginBottom: '20px' }}>\r\n          {myImages.map((image) => (\r\n            <div key={image.id} className=\"image-card\">\r\n              <div style={{ position: 'relative' }}>\r\n                {imageLoadingStates[image.id] ? (\r\n                  <div \r\n                    style={{ \r\n                      width: '100%', \r\n                      height: '200px',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                      backgroundColor: '#f0f0f0',\r\n                      borderTopLeftRadius: '8px',\r\n                      borderTopRightRadius: '8px'\r\n                    }}\r\n                  >\r\n                    <div className=\"spinner\" style={{ width: '40px', height: '40px' }}></div>\r\n                  </div>\r\n                ) : (\r\n                  <img \r\n                    id={`img-${image.id}`}\r\n                    src={getIpfsUrl(image.ipfs_hash)}\r\n                    alt={`ID: ${image.id}`}\r\n                    style={{ \r\n                      width: '100%', \r\n                      height: '200px', \r\n                      objectFit: 'cover',\r\n                      borderTopLeftRadius: '8px',\r\n                      borderTopRightRadius: '8px'\r\n                    }}\r\n                    onError={(e) => {\r\n                      console.log(`Image ${image.id} failed to load, attempting to recover...`);\r\n                      \r\n                      // Set loading state\r\n                      setImageLoadingStates(prev => ({ ...prev, [image.id]: true }));\r\n                      \r\n                      // Call the refresh image function to attempt recovery\r\n                      handleRefreshImage(image);\r\n                    }}\r\n                  />\r\n                )}\r\n                {/* Add a refresh button to retry loading the image */}\r\n                <button \r\n                  style={{\r\n                    position: 'absolute',\r\n                    top: '5px',\r\n                    right: '5px',\r\n                    background: 'rgba(255, 255, 255, 0.7)',\r\n                    border: 'none',\r\n                    borderRadius: '50%',\r\n                    width: '30px',\r\n                    height: '30px',\r\n                    cursor: 'pointer',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center'\r\n                  }}\r\n                  onClick={() => handleRefreshImage(image)}\r\n                  title=\"Refresh image\"\r\n                  disabled={imageLoadingStates[image.id]}\r\n                >\r\n                  {imageLoadingStates[image.id] ? '⌛' : '↻'}\r\n                </button>\r\n              </div>\r\n              \r\n              <div className=\"image-info\">\r\n                <h3>Image #{image.id}</h3>\r\n                <p>Hash: {image.sha256_hash.substring(0, 10)}...</p>\r\n                <p>Uploaded: {new Date(image.uploaded_at).toLocaleString()}</p>\r\n                <p>Deepfake: {image.deepfake_label} ({Math.round(image.deepfake_confidence * 100)}%)</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        \r\n        {/* Pagination Controls */}\r\n        {!loading && myImages.length > 0 && (\r\n          <div className=\"pagination-controls\" style={{ \r\n            display: 'flex', \r\n            justifyContent: 'center', \r\n            alignItems: 'center', \r\n            margin: '20px 0 40px' \r\n          }}>\r\n            <button \r\n              className=\"btn\" \r\n              onClick={previousPage} \r\n              disabled={!pagination.hasPrevious}\r\n              style={{ \r\n                margin: '0 5px',\r\n                opacity: pagination.hasPrevious ? 1 : 0.5,\r\n                cursor: pagination.hasPrevious ? 'pointer' : 'not-allowed'\r\n              }}\r\n            >\r\n              &laquo; Previous\r\n            </button>\r\n            \r\n            <div style={{ margin: '0 15px' }}>\r\n              {/* Page numbers */}\r\n              {Array.from({ length: pagination.totalPages }, (_, i) => i + 1).map(page => (\r\n                <button\r\n                  key={page}\r\n                  onClick={() => goToPage(page)}\r\n                  style={{\r\n                    margin: '0 5px',\r\n                    padding: '5px 10px',\r\n                    border: page === pagination.currentPage ? '2px solid #007bff' : '1px solid #ccc',\r\n                    borderRadius: '4px',\r\n                    background: page === pagination.currentPage ? '#e6f2ff' : 'white',\r\n                    cursor: 'pointer'\r\n                  }}\r\n                >\r\n                  {page}\r\n                </button>\r\n              ))}\r\n            </div>\r\n            \r\n            <button \r\n              className=\"btn\" \r\n              onClick={nextPage} \r\n              disabled={!pagination.hasNext}\r\n              style={{ \r\n                margin: '0 5px',\r\n                opacity: pagination.hasNext ? 1 : 0.5,\r\n                cursor: pagination.hasNext ? 'pointer' : 'not-allowed'\r\n              }}\r\n            >\r\n              Next &raquo;\r\n            </button>\r\n          </div>\r\n        )}\r\n        \r\n        {/* Pagination Info */}\r\n        {!loading && myImages.length > 0 && (\r\n          <div style={{ textAlign: 'center', marginBottom: '30px', color: '#666' }}>\r\n            Showing page {pagination.currentPage} of {pagination.totalPages} ({pagination.totalImages} total images)\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}