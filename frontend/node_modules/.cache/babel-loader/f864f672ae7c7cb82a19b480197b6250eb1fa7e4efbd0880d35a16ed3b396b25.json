{"ast":null,"code":"import api from './index';\n\n/**\r\n * Get summary analytics for all images\r\n * @param {Object} filters - Optional filters for the analytics\r\n * @param {string} filters.startDate - Start date in YYYY-MM-DD format\r\n * @param {string} filters.endDate - End date in YYYY-MM-DD format\r\n * @param {number} filters.userId - Filter by user ID (admin only)\r\n * @returns {Promise} - API response with analytics summary\r\n */\nexport const getImageAnalyticsSummary = async (filters = {}) => {\n  try {\n    const params = new URLSearchParams();\n    if (filters.startDate) params.append('start_date', filters.startDate);\n    if (filters.endDate) params.append('end_date', filters.endDate);\n    if (filters.userId) params.append('user_id', filters.userId);\n    const response = await api.get(`/api/images/analytics/summary/?${params.toString()}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching analytics summary:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get detailed distribution of deepfake detection results\r\n * @param {Object} filters - Optional filters for the analytics\r\n * @param {string} filters.startDate - Start date in YYYY-MM-DD format\r\n * @param {string} filters.endDate - End date in YYYY-MM-DD format\r\n * @returns {Promise} - API response with deepfake distribution data\r\n */\nexport const getDeepfakeDistribution = async (filters = {}) => {\n  try {\n    const params = new URLSearchParams();\n    if (filters.startDate) params.append('start_date', filters.startDate);\n    if (filters.endDate) params.append('end_date', filters.endDate);\n    const response = await api.get(`/api/images/analytics/deepfake-distribution/?${params.toString()}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching deepfake distribution:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get timeline data for image uploads\r\n * @param {string} grouping - Grouping period: 'day', 'week', or 'month'\r\n * @returns {Promise} - API response with upload timeline data\r\n */\nexport const getUploadTimeline = async (grouping = 'day') => {\n  try {\n    const response = await api.get(`/api/images/analytics/upload-timeline/?grouping=${grouping}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching upload timeline:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get analytics on user activity (admin only)\r\n * @returns {Promise} - API response with user activity data\r\n */\nexport const getUserActivity = async () => {\n  try {\n    const response = await api.get('/api/images/analytics/user-activity/');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user activity:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get statistics on image verification\r\n * @returns {Promise} - API response with verification statistics\r\n */\nexport const getVerificationStats = async () => {\n  try {\n    const response = await api.get('/api/images/analytics/verification-stats/');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching verification stats:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","getImageAnalyticsSummary","filters","params","URLSearchParams","startDate","append","endDate","userId","response","get","toString","data","error","console","getDeepfakeDistribution","getUploadTimeline","grouping","getUserActivity","getVerificationStats"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/api/analytics.js"],"sourcesContent":["import api from './index';\r\n\r\n/**\r\n * Get summary analytics for all images\r\n * @param {Object} filters - Optional filters for the analytics\r\n * @param {string} filters.startDate - Start date in YYYY-MM-DD format\r\n * @param {string} filters.endDate - End date in YYYY-MM-DD format\r\n * @param {number} filters.userId - Filter by user ID (admin only)\r\n * @returns {Promise} - API response with analytics summary\r\n */\r\nexport const getImageAnalyticsSummary = async (filters = {}) => {\r\n  try {\r\n    const params = new URLSearchParams();\r\n    if (filters.startDate) params.append('start_date', filters.startDate);\r\n    if (filters.endDate) params.append('end_date', filters.endDate);\r\n    if (filters.userId) params.append('user_id', filters.userId);\r\n    \r\n    const response = await api.get(`/api/images/analytics/summary/?${params.toString()}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching analytics summary:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get detailed distribution of deepfake detection results\r\n * @param {Object} filters - Optional filters for the analytics\r\n * @param {string} filters.startDate - Start date in YYYY-MM-DD format\r\n * @param {string} filters.endDate - End date in YYYY-MM-DD format\r\n * @returns {Promise} - API response with deepfake distribution data\r\n */\r\nexport const getDeepfakeDistribution = async (filters = {}) => {\r\n  try {\r\n    const params = new URLSearchParams();\r\n    if (filters.startDate) params.append('start_date', filters.startDate);\r\n    if (filters.endDate) params.append('end_date', filters.endDate);\r\n    \r\n    const response = await api.get(`/api/images/analytics/deepfake-distribution/?${params.toString()}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching deepfake distribution:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get timeline data for image uploads\r\n * @param {string} grouping - Grouping period: 'day', 'week', or 'month'\r\n * @returns {Promise} - API response with upload timeline data\r\n */\r\nexport const getUploadTimeline = async (grouping = 'day') => {\r\n  try {\r\n    const response = await api.get(`/api/images/analytics/upload-timeline/?grouping=${grouping}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching upload timeline:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get analytics on user activity (admin only)\r\n * @returns {Promise} - API response with user activity data\r\n */\r\nexport const getUserActivity = async () => {\r\n  try {\r\n    const response = await api.get('/api/images/analytics/user-activity/');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching user activity:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get statistics on image verification\r\n * @returns {Promise} - API response with verification statistics\r\n */\r\nexport const getVerificationStats = async () => {\r\n  try {\r\n    const response = await api.get('/api/images/analytics/verification-stats/');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching verification stats:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}