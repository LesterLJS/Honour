{"ast":null,"code":"import api from './index';\n\n/**\r\n * Get summary analytics for images\r\n * @param {Object} filters - Optional filters like startDate, endDate\r\n * @returns {Promise<Object>} Analytics summary data\r\n */\nexport const getImageAnalytics = async (filters = {}) => {\n  try {\n    const params = new URLSearchParams();\n    if (filters.startDate) {\n      params.append('start_date', filters.startDate);\n    }\n    if (filters.endDate) {\n      params.append('end_date', filters.endDate);\n    }\n    const queryString = params.toString() ? `?${params.toString()}` : '';\n    const response = await api.get(`/images/analytics/summary/${queryString}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching image analytics:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get deepfake distribution data\r\n * @param {Object} filters - Optional filters like startDate, endDate\r\n * @returns {Promise<Object>} Deepfake distribution data\r\n */\nexport const getDeepfakeDistribution = async (filters = {}) => {\n  try {\n    const params = new URLSearchParams();\n    if (filters.startDate) {\n      params.append('start_date', filters.startDate);\n    }\n    if (filters.endDate) {\n      params.append('end_date', filters.endDate);\n    }\n    const queryString = params.toString() ? `?${params.toString()}` : '';\n    const response = await api.get(`/images/analytics/deepfake-distribution/${queryString}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching deepfake distribution:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get upload timeline data\r\n * @param {string} grouping - Grouping period ('day', 'week', 'month')\r\n * @returns {Promise<Object>} Upload timeline data\r\n */\nexport const getUploadTimeline = async (grouping = 'day') => {\n  try {\n    const response = await api.get(`/images/analytics/upload-timeline/?grouping=${grouping}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching upload timeline:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get user activity data (admin only)\r\n * @returns {Promise<Object>} User activity data\r\n */\nexport const getUserActivity = async () => {\n  try {\n    const response = await api.get(`/images/analytics/user-activity/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user activity:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get verification statistics\r\n * @returns {Promise<Object>} Verification statistics\r\n */\nexport const getVerificationStats = async () => {\n  try {\n    const response = await api.get(`/images/analytics/verification-stats/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching verification stats:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","getImageAnalytics","filters","params","URLSearchParams","startDate","append","endDate","queryString","toString","response","get","data","error","console","getDeepfakeDistribution","getUploadTimeline","grouping","getUserActivity","getVerificationStats"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/api/analytics.js"],"sourcesContent":["import api from './index';\r\n\r\n/**\r\n * Get summary analytics for images\r\n * @param {Object} filters - Optional filters like startDate, endDate\r\n * @returns {Promise<Object>} Analytics summary data\r\n */\r\nexport const getImageAnalytics = async (filters = {}) => {\r\n  try {\r\n    const params = new URLSearchParams();\r\n    \r\n    if (filters.startDate) {\r\n      params.append('start_date', filters.startDate);\r\n    }\r\n    \r\n    if (filters.endDate) {\r\n      params.append('end_date', filters.endDate);\r\n    }\r\n    \r\n    const queryString = params.toString() ? `?${params.toString()}` : '';\r\n    const response = await api.get(`/images/analytics/summary/${queryString}`);\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching image analytics:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get deepfake distribution data\r\n * @param {Object} filters - Optional filters like startDate, endDate\r\n * @returns {Promise<Object>} Deepfake distribution data\r\n */\r\nexport const getDeepfakeDistribution = async (filters = {}) => {\r\n  try {\r\n    const params = new URLSearchParams();\r\n    \r\n    if (filters.startDate) {\r\n      params.append('start_date', filters.startDate);\r\n    }\r\n    \r\n    if (filters.endDate) {\r\n      params.append('end_date', filters.endDate);\r\n    }\r\n    \r\n    const queryString = params.toString() ? `?${params.toString()}` : '';\r\n    const response = await api.get(`/images/analytics/deepfake-distribution/${queryString}`);\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching deepfake distribution:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get upload timeline data\r\n * @param {string} grouping - Grouping period ('day', 'week', 'month')\r\n * @returns {Promise<Object>} Upload timeline data\r\n */\r\nexport const getUploadTimeline = async (grouping = 'day') => {\r\n  try {\r\n    const response = await api.get(`/images/analytics/upload-timeline/?grouping=${grouping}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching upload timeline:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get user activity data (admin only)\r\n * @returns {Promise<Object>} User activity data\r\n */\r\nexport const getUserActivity = async () => {\r\n  try {\r\n    const response = await api.get(`/images/analytics/user-activity/`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching user activity:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get verification statistics\r\n * @returns {Promise<Object>} Verification statistics\r\n */\r\nexport const getVerificationStats = async () => {\r\n  try {\r\n    const response = await api.get(`/images/analytics/verification-stats/`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching verification stats:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}