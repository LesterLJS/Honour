{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000'\n});\n\n// Add request interceptor for JWT token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor for token refresh\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // If error is 401 and we haven't tried to refresh the token yet\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refresh_token');\n\n      // Make sure we have a refresh token\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      console.log('Attempting to refresh token...');\n\n      // Use the full URL for the refresh endpoint\n      const response = await axios.post(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/api/auth/token/refresh/`, {\n        refresh: refreshToken\n      });\n      const {\n        access\n      } = response.data;\n\n      // Make sure we got a new access token\n      if (!access) {\n        throw new Error('No access token received');\n      }\n      console.log('Token refresh successful');\n      localStorage.setItem('access_token', access);\n\n      // Update the Authorization header for the retry\n      originalRequest.headers['Authorization'] = `Bearer ${access}`;\n\n      // Remove any cache-busting parameters that might cause request loops\n      if (originalRequest.params && originalRequest.params.t) {\n        delete originalRequest.params.t;\n      }\n\n      // Retry the original request with the new token\n      return api(originalRequest);\n    } catch (refreshError) {\n      console.error('Token refresh failed:', refreshError);\n\n      // Redirect to login if refresh fails\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('user_data');\n\n      // Use a small timeout to allow the current request to complete\n      setTimeout(() => {\n        console.log('Redirecting to login page due to authentication failure');\n        window.location.href = '/login';\n      }, 100);\n      return Promise.reject(refreshError);\n    }\n  }\n\n  // For other errors, just reject the promise\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","Error","console","log","post","refresh","access","data","setItem","params","t","refreshError","removeItem","setTimeout","window","location","href"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\r\n});\r\n\r\n// Add request interceptor for JWT token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('access_token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Add response interceptor for token refresh\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // If error is 401 and we haven't tried to refresh the token yet\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        const refreshToken = localStorage.getItem('refresh_token');\r\n        \r\n        // Make sure we have a refresh token\r\n        if (!refreshToken) {\r\n          throw new Error('No refresh token available');\r\n        }\r\n        \r\n        console.log('Attempting to refresh token...');\r\n        \r\n        // Use the full URL for the refresh endpoint\r\n        const response = await axios.post(\r\n          `${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/api/auth/token/refresh/`, \r\n          { refresh: refreshToken }\r\n        );\r\n        \r\n        const { access } = response.data;\r\n        \r\n        // Make sure we got a new access token\r\n        if (!access) {\r\n          throw new Error('No access token received');\r\n        }\r\n        \r\n        console.log('Token refresh successful');\r\n        localStorage.setItem('access_token', access);\r\n        \r\n        // Update the Authorization header for the retry\r\n        originalRequest.headers['Authorization'] = `Bearer ${access}`;\r\n        \r\n        // Remove any cache-busting parameters that might cause request loops\r\n        if (originalRequest.params && originalRequest.params.t) {\r\n          delete originalRequest.params.t;\r\n        }\r\n        \r\n        // Retry the original request with the new token\r\n        return api(originalRequest);\r\n      } catch (refreshError) {\r\n        console.error('Token refresh failed:', refreshError);\r\n        \r\n        // Redirect to login if refresh fails\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('refresh_token');\r\n        localStorage.removeItem('user_data');\r\n        \r\n        // Use a small timeout to allow the current request to complete\r\n        setTimeout(() => {\r\n          console.log('Redirecting to login page due to authentication failure');\r\n          window.location.href = '/login';\r\n        }, 100);\r\n        \r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    \r\n    // For other errors, just reject the promise\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI;AAC5C,CAAC,CAAC;;AAEF;AACAL,GAAG,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAd,GAAG,CAACM,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACf,MAAMC,eAAe,GAAGL,KAAK,CAACL,MAAM;;EAEpC;EACA,IAAI,EAAAS,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF,MAAMC,YAAY,GAAGX,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;;MAE1D;MACA,IAAI,CAACU,YAAY,EAAE;QACjB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MAEAC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;;MAE7C;MACA,MAAMR,QAAQ,GAAG,MAAMlB,KAAK,CAAC2B,IAAI,CAC/B,GAAGvB,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB,0BAA0B,EACrF;QAAEsB,OAAO,EAAEL;MAAa,CAC1B,CAAC;MAED,MAAM;QAAEM;MAAO,CAAC,GAAGX,QAAQ,CAACY,IAAI;;MAEhC;MACA,IAAI,CAACD,MAAM,EAAE;QACX,MAAM,IAAIL,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MAEAC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCd,YAAY,CAACmB,OAAO,CAAC,cAAc,EAAEF,MAAM,CAAC;;MAE5C;MACAT,eAAe,CAACN,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUe,MAAM,EAAE;;MAE7D;MACA,IAAIT,eAAe,CAACY,MAAM,IAAIZ,eAAe,CAACY,MAAM,CAACC,CAAC,EAAE;QACtD,OAAOb,eAAe,CAACY,MAAM,CAACC,CAAC;MACjC;;MAEA;MACA,OAAOhC,GAAG,CAACmB,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOc,YAAY,EAAE;MACrBT,OAAO,CAACV,KAAK,CAAC,uBAAuB,EAAEmB,YAAY,CAAC;;MAEpD;MACAtB,YAAY,CAACuB,UAAU,CAAC,cAAc,CAAC;MACvCvB,YAAY,CAACuB,UAAU,CAAC,eAAe,CAAC;MACxCvB,YAAY,CAACuB,UAAU,CAAC,WAAW,CAAC;;MAEpC;MACAC,UAAU,CAAC,MAAM;QACfX,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;QACtEW,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MACjC,CAAC,EAAE,GAAG,CAAC;MAEP,OAAOvB,OAAO,CAACC,MAAM,CAACiB,YAAY,CAAC;IACrC;EACF;;EAEA;EACA,OAAOlB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}