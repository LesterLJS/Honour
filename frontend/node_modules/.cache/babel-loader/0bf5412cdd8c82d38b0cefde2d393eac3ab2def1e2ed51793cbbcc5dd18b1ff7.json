{"ast":null,"code":"import api from './index';\n\n/**\r\n * Upload an image to the server\r\n * @param {File} imageFile - The image file to upload\r\n * @returns {Promise} - API response with the uploaded image data\r\n */\nexport const uploadImage = imageFile => {\n  const formData = new FormData();\n  formData.append('file', imageFile);\n  return api.post('/api/images/upload/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n/**\r\n * Get all images uploaded by the current user\r\n * @returns {Promise} - API response with the user's images\r\n */\nexport const getMyImages = () => {\n  return api.get('/api/images/my/');\n};\n\n/**\r\n * Get IPFS download link for an image\r\n * @param {number} imageId - The ID of the image\r\n * @returns {Promise} - API response with the IPFS URL\r\n */\nexport const getImageDownloadLink = async imageId => {\n  const response = await api.get(`/api/images/download/${imageId}/`);\n  const jsonResponse = response.data;\n  const cid = jsonResponse.cid;\n\n  // Construct the correct IPFS URL\n  return `http://localhost:8080/ipfs/${cid}`;\n};\n\n/**\r\n * Search for similar images\r\n * @param {File} imageFile - The image file to use as a query\r\n * @returns {Promise} - API response with similar images\r\n */\nexport const searchSimilarImages = imageFile => {\n  const formData = new FormData();\n  formData.append('file', imageFile);\n  return api.post('/api/images/search-similar/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n/**\r\n * Admin: Get all images from all users\r\n * @returns {Promise} - API response with all images\r\n */\nexport const getAllImages = () => {\n  return api.get('/api/images/admin/images/');\n};\n\n/**\r\n * Admin: Delete an image\r\n * @param {number} imageId - The ID of the image to delete\r\n * @returns {Promise} - API response confirming deletion\r\n */\nexport const deleteImage = imageId => {\n  return api.delete(`/api/images/admin/images/${imageId}/`);\n};","map":{"version":3,"names":["api","uploadImage","imageFile","formData","FormData","append","post","headers","getMyImages","get","getImageDownloadLink","imageId","response","jsonResponse","data","cid","searchSimilarImages","getAllImages","deleteImage","delete"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/api/images.js"],"sourcesContent":["import api from './index';\r\n\r\n/**\r\n * Upload an image to the server\r\n * @param {File} imageFile - The image file to upload\r\n * @returns {Promise} - API response with the uploaded image data\r\n */\r\nexport const uploadImage = (imageFile) => {\r\n  const formData = new FormData();\r\n  formData.append('file', imageFile);\r\n  return api.post('/api/images/upload/', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};\r\n\r\n/**\r\n * Get all images uploaded by the current user\r\n * @returns {Promise} - API response with the user's images\r\n */\r\nexport const getMyImages = () => {\r\n  return api.get('/api/images/my/');\r\n};\r\n\r\n/**\r\n * Get IPFS download link for an image\r\n * @param {number} imageId - The ID of the image\r\n * @returns {Promise} - API response with the IPFS URL\r\n */\r\nexport const getImageDownloadLink = async (imageId) => {\r\n  const response = await api.get(`/api/images/download/${imageId}/`);\r\n  const jsonResponse = response.data;\r\n  const cid = jsonResponse.cid;\r\n\r\n  // Construct the correct IPFS URL\r\n  return `http://localhost:8080/ipfs/${cid}`;\r\n};\r\n\r\n\r\n/**\r\n * Search for similar images\r\n * @param {File} imageFile - The image file to use as a query\r\n * @returns {Promise} - API response with similar images\r\n */\r\nexport const searchSimilarImages = (imageFile) => {\r\n  const formData = new FormData();\r\n  formData.append('file', imageFile);\r\n  return api.post('/api/images/search-similar/', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};\r\n\r\n/**\r\n * Admin: Get all images from all users\r\n * @returns {Promise} - API response with all images\r\n */\r\nexport const getAllImages = () => {\r\n  return api.get('/api/images/admin/images/');\r\n};\r\n\r\n/**\r\n * Admin: Delete an image\r\n * @param {number} imageId - The ID of the image to delete\r\n * @returns {Promise} - API response confirming deletion\r\n */\r\nexport const deleteImage = (imageId) => {\r\n  return api.delete(`/api/images/admin/images/${imageId}/`);\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,SAAS;;AAEzB;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,SAAS,IAAK;EACxC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,SAAS,CAAC;EAClC,OAAOF,GAAG,CAACM,IAAI,CAAC,qBAAqB,EAAEH,QAAQ,EAAE;IAC/CI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAC/B,OAAOR,GAAG,CAACS,GAAG,CAAC,iBAAiB,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,OAAO,IAAK;EACrD,MAAMC,QAAQ,GAAG,MAAMZ,GAAG,CAACS,GAAG,CAAC,wBAAwBE,OAAO,GAAG,CAAC;EAClE,MAAME,YAAY,GAAGD,QAAQ,CAACE,IAAI;EAClC,MAAMC,GAAG,GAAGF,YAAY,CAACE,GAAG;;EAE5B;EACA,OAAO,8BAA8BA,GAAG,EAAE;AAC5C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAId,SAAS,IAAK;EAChD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,SAAS,CAAC;EAClC,OAAOF,GAAG,CAACM,IAAI,CAAC,6BAA6B,EAAEH,QAAQ,EAAE;IACvDI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMU,YAAY,GAAGA,CAAA,KAAM;EAChC,OAAOjB,GAAG,CAACS,GAAG,CAAC,2BAA2B,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,WAAW,GAAIP,OAAO,IAAK;EACtC,OAAOX,GAAG,CAACmB,MAAM,CAAC,4BAA4BR,OAAO,GAAG,CAAC;AAC3D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}