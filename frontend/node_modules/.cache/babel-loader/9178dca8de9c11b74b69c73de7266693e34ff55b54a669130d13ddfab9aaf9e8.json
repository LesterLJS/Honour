{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Erwachens\\\\Desktop\\\\MyProject\\\\frontend\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { useImages } from '../context/ImageContext';\nimport Navbar from '../components/common/Navbar';\nimport { getIpfsUrl, getBestIpfsUrl } from '../util/ipfs';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const {\n    myImages,\n    loading,\n    error,\n    pagination,\n    getMyImages,\n    getImageDownloadLink,\n    downloadImageFile,\n    pinAllImages,\n    pinImage,\n    unpinImage,\n    runGarbageCollection,\n    runSelectiveGarbageCollection,\n    nextPage,\n    previousPage,\n    goToPage\n  } = useImages();\n\n  // Add state to track loading status of individual images\n  const [imageLoadingStates, setImageLoadingStates] = useState({});\n\n  // Enhanced queue for limiting concurrent API requests with retry and backoff\n  const requestQueue = React.useRef({\n    queue: [],\n    running: 0,\n    maxConcurrent: 2,\n    // Limit to 2 concurrent requests\n    maxRetries: 3,\n    // Maximum number of retries per request\n\n    add(fn, priority = false, retryCount = 0) {\n      const queueItem = {\n        fn,\n        retryCount\n      };\n\n      // Add high priority items to the front of the queue\n      if (priority) {\n        this.queue.unshift(queueItem);\n      } else {\n        this.queue.push(queueItem);\n      }\n      this.processQueue();\n    },\n    async processQueue() {\n      if (this.running >= this.maxConcurrent || this.queue.length === 0) {\n        return;\n      }\n      this.running++;\n      const {\n        fn,\n        retryCount\n      } = this.queue.shift();\n      try {\n        await fn();\n      } catch (error) {\n        console.error(\"Error in queue processing:\", error);\n\n        // Implement retry with exponential backoff\n        if (retryCount < this.maxRetries) {\n          console.log(`Retrying request (attempt ${retryCount + 1} of ${this.maxRetries})...`);\n\n          // Calculate backoff delay: 2^retryCount * 1000ms (1s, 2s, 4s, etc.)\n          const backoffDelay = Math.min(Math.pow(2, retryCount) * 1000, 10000);\n          setTimeout(() => {\n            // Re-add the failed request to the queue with increased retry count\n            this.add(fn, false, retryCount + 1);\n          }, backoffDelay);\n        }\n      } finally {\n        this.running--;\n\n        // Add a small delay between requests to prevent overwhelming the server\n        setTimeout(() => {\n          this.processQueue();\n        }, 100);\n      }\n    },\n    // Clear the queue (useful when component unmounts)\n    clear() {\n      this.queue = [];\n    }\n  });\n  useEffect(() => {\n    // Fetch user's images when component mounts and preload them\n    const loadAndPreloadImages = async () => {\n      try {\n        // Load the first page of images (or the current page if refreshing)\n        const response = await getMyImages(pagination.currentPage, pagination.pageSize);\n        const images = response.results || [];\n\n        // Preload images sequentially using the request queue to limit concurrent requests\n        images.forEach(image => {\n          requestQueue.current.add(async () => {\n            setImageLoadingStates(prev => ({\n              ...prev,\n              [image.id]: true\n            }));\n            try {\n              // Get download link which will attempt to pin if not pinned\n              await getImageDownloadLink(image.id);\n              console.log(`Preloaded image ${image.id}`);\n            } catch (err) {\n              console.error(`Failed to preload image ${image.id}:`, err);\n            } finally {\n              setImageLoadingStates(prev => ({\n                ...prev,\n                [image.id]: false\n              }));\n            }\n          });\n        });\n      } catch (err) {\n        console.error('Failed to load images:', err);\n      }\n    };\n    loadAndPreloadImages();\n  }, [pagination.currentPage, pagination.pageSize, getMyImages, getImageDownloadLink]); // Include all dependencies\n\n  const handleDownload = async imageId => {\n    try {\n      // First try the direct download method\n      console.log(`Attempting direct download for image ${imageId}`);\n      setImageLoadingStates(prev => ({\n        ...prev,\n        [imageId]: true\n      }));\n      const directResult = await downloadImageFile(imageId);\n      if (directResult.success) {\n        console.log(`Direct download successful for image ${imageId}`);\n\n        // If we got an objectUrl (blob), create a download link\n        if (directResult.objectUrl) {\n          // Create a temporary anchor element to trigger download\n          const link = document.createElement('a');\n          link.href = directResult.objectUrl;\n          link.setAttribute('download', `image-${imageId}.jpg`);\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n\n          // Clean up the object URL to avoid memory leaks\n          setTimeout(() => URL.revokeObjectURL(directResult.objectUrl), 100);\n          console.log(`Download initiated for image ${imageId} using blob`);\n        }\n        // If we got a fallback URL, open it in a new tab\n        else if (directResult.url) {\n          window.open(directResult.url, '_blank');\n          console.log(`Download initiated for image ${imageId} using fallback URL`);\n        }\n      } else {\n        // If direct download failed, fall back to the old method\n        console.log(`Direct download failed for image ${imageId}, falling back to link method`);\n        const response = await getImageDownloadLink(imageId);\n        console.log(`Download link response for image ${imageId}:`, response);\n\n        // Get the image from our state\n        const image = myImages.find(img => img.id === imageId);\n        if (!image) {\n          console.error(`Image ${imageId} not found in state`);\n          return;\n        }\n\n        // Get the best available URL (local or public)\n        let downloadUrl;\n        if (response.data && response.data.ipfsUrls && response.data.ipfsUrls.local) {\n          downloadUrl = response.data.ipfsUrls.local;\n          console.log(`Using local URL from response: ${downloadUrl}`);\n        } else if (response.data && response.data.ipfsUrl) {\n          // Fallback to the original URL if the new structure isn't available\n          downloadUrl = response.data.ipfsUrl;\n          console.log(`Using original URL from response: ${downloadUrl}`);\n        } else {\n          // If no URL is available, construct one from the hash using our utility\n          const hash = response.data && response.data.ipfsHash || image.ipfs_hash;\n          downloadUrl = getIpfsUrl(hash);\n          console.log(`Constructed URL from hash: ${downloadUrl}`);\n        }\n\n        // Create a temporary anchor element to trigger download\n        const link = document.createElement('a');\n        link.href = downloadUrl;\n        link.setAttribute('download', `image-${imageId}.jpg`);\n        link.setAttribute('target', '_blank');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        console.log(`Download initiated for image ${imageId} using fallback method`);\n      }\n    } catch (err) {\n      console.error('Failed to download image:', err);\n      alert('Failed to download image. Please try again later.');\n    } finally {\n      setImageLoadingStates(prev => ({\n        ...prev,\n        [imageId]: false\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Welcome, \", user === null || user === void 0 ? void 0 : user.username, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Role: \", user === null || user === void 0 ? void 0 : user.role]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/upload\",\n            className: \"btn\",\n            children: \"Upload New Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/search\",\n            className: \"btn\",\n            style: {\n              marginLeft: '10px'\n            },\n            children: \"Search Similar Images\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/analytics\",\n            className: \"btn\",\n            style: {\n              marginLeft: '10px'\n            },\n            children: \"Analytics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            style: {\n              marginLeft: '10px'\n            },\n            onClick: async () => {\n              try {\n                const result = await pinAllImages();\n                alert(`Pin operation completed: ${result.newly_pinned} images newly pinned, ${result.already_pinned} were already pinned, ${result.failed_pins} failed.`);\n              } catch (err) {\n                console.error('Failed to pin images:', err);\n                alert('Failed to pin images. Please try again later.');\n              }\n            },\n            children: \"Pin All My Images\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this), (user === null || user === void 0 ? void 0 : user.role) === 'admin' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              style: {\n                marginLeft: '10px',\n                backgroundColor: '#f0ad4e'\n              },\n              onClick: async () => {\n                if (window.confirm('Are you sure you want to run garbage collection? This will remove all unpinned content from the IPFS repository.')) {\n                  try {\n                    const result = await runGarbageCollection();\n                    alert(`Garbage collection completed successfully. Initial size: ${result.initial_size}, Final size: ${result.final_size}`);\n                  } catch (err) {\n                    console.error('Failed to run garbage collection:', err);\n                    alert('Failed to run garbage collection. Please try again later.');\n                  }\n                }\n              },\n              children: \"Reset IPFS Cache\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              style: {\n                marginLeft: '10px',\n                backgroundColor: '#17a2b8'\n              },\n              onClick: () => {\n                // Get date range for selective garbage collection\n                const startDate = prompt('Enter start date (YYYY-MM-DD) or leave empty:');\n                if (startDate === null) return; // User cancelled\n\n                const endDate = prompt('Enter end date (YYYY-MM-DD) or leave empty:');\n                if (endDate === null) return; // User cancelled\n\n                const params = {};\n                if (startDate) params.start_date = startDate;\n                if (endDate) params.end_date = endDate;\n                if (window.confirm(`Are you sure you want to run selective garbage collection${startDate ? ` from ${startDate}` : ''}${endDate ? ` to ${endDate}` : ''}? This will keep pinned only the images within the specified date range.`)) {\n                  try {\n                    runSelectiveGarbageCollection(params).then(result => {\n                      alert(`Selective garbage collection completed successfully. Kept ${result.kept_pins} images pinned, unpinned ${result.unpinned} images.`);\n                    }).catch(err => {\n                      console.error('Failed to run selective garbage collection:', err);\n                      alert('Failed to run selective garbage collection. Please try again later.');\n                    });\n                  } catch (err) {\n                    console.error('Failed to run selective garbage collection:', err);\n                    alert('Failed to run selective garbage collection. Please try again later.');\n                  }\n                }\n              },\n              children: \"Selective GC\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: '30px'\n        },\n        children: \"My Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this), !loading && myImages.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You haven't uploaded any images yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-grid\",\n        style: {\n          marginBottom: '20px'\n        },\n        children: myImages.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'relative'\n            },\n            children: [imageLoadingStates[image.id] ? /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: '100%',\n                height: '200px',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: '#f0f0f0',\n                borderTopLeftRadius: '8px',\n                borderTopRightRadius: '8px'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"spinner\",\n                style: {\n                  width: '40px',\n                  height: '40px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n              id: `img-${image.id}`,\n              src: image.ipfs_hash ? getIpfsUrl(image.ipfs_hash, true) : 'https://via.placeholder.com/300x200?text=No+IPFS+Hash' // Handle null ipfs_hash\n              ,\n              alt: `ID: ${image.id}`,\n              style: {\n                width: '100%',\n                height: '200px',\n                objectFit: 'cover',\n                borderTopLeftRadius: '8px',\n                borderTopRightRadius: '8px'\n              },\n              onError: e => {\n                console.log(`Image ${image.id} failed to load, attempting to recover...`);\n\n                // Set loading state\n                setImageLoadingStates(prev => ({\n                  ...prev,\n                  [image.id]: true\n                }));\n\n                // Use getBestIpfsUrl with more retries if ipfs_hash exists\n                if (image.ipfs_hash) {\n                  getBestIpfsUrl(image.ipfs_hash, 5).then(bestUrl => {\n                    console.log(`Got best URL for image ${image.id}: ${bestUrl}`);\n                    e.target.src = bestUrl;\n\n                    // If that fails, try to pin and get a new URL\n                    e.target.onerror = () => {\n                      console.log(`Best URL failed for image ${image.id}, trying to pin...`);\n                      getImageDownloadLink(image.id).then(response => {\n                        if (response.isPinned) {\n                          console.log(`Image ${image.id} is now pinned, retrying load...`);\n                          // If now pinned, retry loading the image with force reload\n                          e.target.src = getIpfsUrl(image.ipfs_hash, true);\n                          e.target.onerror = null; // Remove this error handler\n                        } else {\n                          console.log(`Image ${image.id} is still not pinned, showing placeholder`);\n                          // If still not pinned, show placeholder\n                          e.target.onerror = null;\n                          e.target.src = 'https://via.placeholder.com/300x200?text=Image+Unavailable';\n                        }\n                        setImageLoadingStates(prev => ({\n                          ...prev,\n                          [image.id]: false\n                        }));\n                      }).catch(err => {\n                        console.error(`Error getting download link for image ${image.id}:`, err);\n                        // On error, show placeholder\n                        e.target.onerror = null;\n                        e.target.src = 'https://via.placeholder.com/300x200?text=Image+Unavailable';\n                        setImageLoadingStates(prev => ({\n                          ...prev,\n                          [image.id]: false\n                        }));\n                      });\n                    };\n                  }).catch(err => {\n                    console.error(`Error getting best URL for image ${image.id}:`, err);\n                    setImageLoadingStates(prev => ({\n                      ...prev,\n                      [image.id]: false\n                    }));\n                  });\n                } else {\n                  // If no IPFS hash, show placeholder immediately\n                  e.target.src = 'https://via.placeholder.com/300x200?text=No+IPFS+Hash';\n                  setImageLoadingStates(prev => ({\n                    ...prev,\n                    [image.id]: false\n                  }));\n                }\n              },\n              onLoad: () => {\n                console.log(`Image ${image.id} loaded successfully`);\n                setImageLoadingStates(prev => ({\n                  ...prev,\n                  [image.id]: false\n                }));\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                position: 'absolute',\n                top: '5px',\n                right: '5px',\n                background: 'rgba(255, 255, 255, 0.7)',\n                border: 'none',\n                borderRadius: '50%',\n                width: '30px',\n                height: '30px',\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              },\n              onClick: () => {\n                // Set loading state\n                setImageLoadingStates(prev => ({\n                  ...prev,\n                  [image.id]: true\n                }));\n\n                // Get download link to ensure image is pinned\n                getImageDownloadLink(image.id).then(async response => {\n                  console.log(`Refresh requested for image ${image.id}, pin status:`, response.isPinned);\n\n                  // If not pinned, try to pin it\n                  if (!response.isPinned) {\n                    try {\n                      await pinImage(image.id);\n                      console.log(`Manually pinned image ${image.id}`);\n                    } catch (err) {\n                      console.error(`Error pinning image ${image.id}:`, err);\n                    }\n                  }\n\n                  // Force reload the image\n                  const imgElement = document.getElementById(`img-${image.id}`);\n                  if (imgElement) {\n                    // Use getBestIpfsUrl to get the most reliable URL\n                    const bestUrl = await getBestIpfsUrl(image.ipfs_hash, 5);\n                    imgElement.src = bestUrl;\n                  }\n                  setImageLoadingStates(prev => ({\n                    ...prev,\n                    [image.id]: false\n                  }));\n                }).catch(err => {\n                  console.error(`Error refreshing image ${image.id}:`, err);\n                  setImageLoadingStates(prev => ({\n                    ...prev,\n                    [image.id]: false\n                  }));\n                });\n              },\n              title: \"Refresh image\",\n              disabled: imageLoadingStates[image.id],\n              children: imageLoadingStates[image.id] ? '⌛' : '↻'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Image #\", image.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Hash: \", image.sha256_hash.substring(0, 10), \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Uploaded: \", new Date(image.uploaded_at).toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Deepfake: \", image.deepfake_label, \" (\", Math.round(image.deepfake_confidence * 100), \"%)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                marginBottom: '10px',\n                color: image.is_pinned ? '#28a745' : '#dc3545'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  display: 'inline-block',\n                  width: '10px',\n                  height: '10px',\n                  borderRadius: '50%',\n                  backgroundColor: image.is_pinned ? '#28a745' : '#dc3545',\n                  marginRight: '5px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: image.is_pinned ? 'Pinned' : 'Not Pinned'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"image-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                onClick: () => handleDownload(image.id),\n                children: \"Download\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 19\n              }, this), image.is_pinned ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                style: {\n                  marginLeft: '10px',\n                  backgroundColor: '#dc3545'\n                },\n                onClick: async () => {\n                  try {\n                    await unpinImage(image.id);\n                    alert(`Image #${image.id} has been unpinned.`);\n                  } catch (err) {\n                    console.error('Failed to unpin image:', err);\n                    alert('Failed to unpin image. Please try again later.');\n                  }\n                },\n                children: \"Unpin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                style: {\n                  marginLeft: '10px',\n                  backgroundColor: '#28a745'\n                },\n                onClick: async () => {\n                  try {\n                    await pinImage(image.id);\n                    alert(`Image #${image.id} has been pinned.`);\n                  } catch (err) {\n                    console.error('Failed to pin image:', err);\n                    alert('Failed to pin image. Please try again later.');\n                  }\n                },\n                children: \"Pin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 15\n          }, this)]\n        }, image.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), !loading && myImages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-controls\",\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          margin: '20px 0 40px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: previousPage,\n          disabled: !pagination.hasPrevious,\n          style: {\n            margin: '0 5px',\n            opacity: pagination.hasPrevious ? 1 : 0.5,\n            cursor: pagination.hasPrevious ? 'pointer' : 'not-allowed'\n          },\n          children: \"\\xAB Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: '0 15px'\n          },\n          children: Array.from({\n            length: pagination.totalPages\n          }, (_, i) => i + 1).map(page => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => goToPage(page),\n            style: {\n              margin: '0 5px',\n              padding: '5px 10px',\n              border: page === pagination.currentPage ? '2px solid #007bff' : '1px solid #ccc',\n              borderRadius: '4px',\n              background: page === pagination.currentPage ? '#e6f2ff' : 'white',\n              cursor: 'pointer'\n            },\n            children: page\n          }, page, false, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: nextPage,\n          disabled: !pagination.hasNext,\n          style: {\n            margin: '0 5px',\n            opacity: pagination.hasNext ? 1 : 0.5,\n            cursor: pagination.hasNext ? 'pointer' : 'not-allowed'\n          },\n          children: \"Next \\xBB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 11\n      }, this), !loading && myImages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          marginBottom: '30px',\n          color: '#666'\n        },\n        children: [\"Showing page \", pagination.currentPage, \" of \", pagination.totalPages, \" (\", pagination.totalImages, \" total images)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"h3uLRnzT4R3d9BPAdvLArQj8TVw=\", false, function () {\n  return [useAuth, useImages];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","Link","useAuth","useImages","Navbar","getIpfsUrl","getBestIpfsUrl","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","user","myImages","loading","error","pagination","getMyImages","getImageDownloadLink","downloadImageFile","pinAllImages","pinImage","unpinImage","runGarbageCollection","runSelectiveGarbageCollection","nextPage","previousPage","goToPage","imageLoadingStates","setImageLoadingStates","requestQueue","useRef","queue","running","maxConcurrent","maxRetries","add","fn","priority","retryCount","queueItem","unshift","push","processQueue","length","shift","console","log","backoffDelay","Math","min","pow","setTimeout","clear","loadAndPreloadImages","response","currentPage","pageSize","images","results","forEach","image","current","prev","id","err","handleDownload","imageId","directResult","success","objectUrl","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","URL","revokeObjectURL","url","window","open","find","img","downloadUrl","data","ipfsUrls","local","ipfsUrl","hash","ipfsHash","ipfs_hash","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","className","username","role","style","marginTop","to","marginLeft","onClick","result","newly_pinned","already_pinned","failed_pins","backgroundColor","confirm","initial_size","final_size","startDate","prompt","endDate","params","start_date","end_date","then","kept_pins","unpinned","catch","marginBottom","map","position","width","height","display","alignItems","justifyContent","borderTopLeftRadius","borderTopRightRadius","src","alt","objectFit","onError","e","bestUrl","target","onerror","isPinned","onLoad","top","right","background","border","borderRadius","cursor","imgElement","getElementById","title","disabled","sha256_hash","substring","Date","uploaded_at","toLocaleString","deepfake_label","round","deepfake_confidence","color","is_pinned","marginRight","margin","hasPrevious","opacity","Array","from","totalPages","_","i","page","padding","hasNext","textAlign","totalImages","_c","$RefreshReg$"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/pages/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { useImages } from '../context/ImageContext';\r\nimport Navbar from '../components/common/Navbar';\r\nimport { getIpfsUrl, getBestIpfsUrl } from '../util/ipfs';\r\n\r\nconst Dashboard = () => {\r\n  const { user } = useAuth();\r\n  const { \r\n    myImages, \r\n    loading, \r\n    error, \r\n    pagination,\r\n    getMyImages, \r\n    getImageDownloadLink,\r\n    downloadImageFile,\r\n    pinAllImages,\r\n    pinImage,\r\n    unpinImage,\r\n    runGarbageCollection,\r\n    runSelectiveGarbageCollection,\r\n    nextPage,\r\n    previousPage,\r\n    goToPage\r\n  } = useImages();\r\n\r\n  // Add state to track loading status of individual images\r\n  const [imageLoadingStates, setImageLoadingStates] = useState({});\r\n\r\n  // Enhanced queue for limiting concurrent API requests with retry and backoff\r\n  const requestQueue = React.useRef({\r\n    queue: [],\r\n    running: 0,\r\n    maxConcurrent: 2, // Limit to 2 concurrent requests\r\n    maxRetries: 3,    // Maximum number of retries per request\r\n    \r\n    add(fn, priority = false, retryCount = 0) {\r\n      const queueItem = { fn, retryCount };\r\n      \r\n      // Add high priority items to the front of the queue\r\n      if (priority) {\r\n        this.queue.unshift(queueItem);\r\n      } else {\r\n        this.queue.push(queueItem);\r\n      }\r\n      \r\n      this.processQueue();\r\n    },\r\n    \r\n    async processQueue() {\r\n      if (this.running >= this.maxConcurrent || this.queue.length === 0) {\r\n        return;\r\n      }\r\n      \r\n      this.running++;\r\n      const { fn, retryCount } = this.queue.shift();\r\n      \r\n      try {\r\n        await fn();\r\n      } catch (error) {\r\n        console.error(\"Error in queue processing:\", error);\r\n        \r\n        // Implement retry with exponential backoff\r\n        if (retryCount < this.maxRetries) {\r\n          console.log(`Retrying request (attempt ${retryCount + 1} of ${this.maxRetries})...`);\r\n          \r\n          // Calculate backoff delay: 2^retryCount * 1000ms (1s, 2s, 4s, etc.)\r\n          const backoffDelay = Math.min(Math.pow(2, retryCount) * 1000, 10000);\r\n          \r\n          setTimeout(() => {\r\n            // Re-add the failed request to the queue with increased retry count\r\n            this.add(fn, false, retryCount + 1);\r\n          }, backoffDelay);\r\n        }\r\n      } finally {\r\n        this.running--;\r\n        \r\n        // Add a small delay between requests to prevent overwhelming the server\r\n        setTimeout(() => {\r\n          this.processQueue();\r\n        }, 100);\r\n      }\r\n    },\r\n    \r\n    // Clear the queue (useful when component unmounts)\r\n    clear() {\r\n      this.queue = [];\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Fetch user's images when component mounts and preload them\r\n    const loadAndPreloadImages = async () => {\r\n      try {\r\n        // Load the first page of images (or the current page if refreshing)\r\n        const response = await getMyImages(pagination.currentPage, pagination.pageSize);\r\n        const images = response.results || [];\r\n        \r\n        // Preload images sequentially using the request queue to limit concurrent requests\r\n        images.forEach(image => {\r\n          requestQueue.current.add(async () => {\r\n            setImageLoadingStates(prev => ({ ...prev, [image.id]: true }));\r\n            try {\r\n              // Get download link which will attempt to pin if not pinned\r\n              await getImageDownloadLink(image.id);\r\n              console.log(`Preloaded image ${image.id}`);\r\n            } catch (err) {\r\n              console.error(`Failed to preload image ${image.id}:`, err);\r\n            } finally {\r\n              setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n            }\r\n          });\r\n        });\r\n      } catch (err) {\r\n        console.error('Failed to load images:', err);\r\n      }\r\n    };\r\n    \r\n    loadAndPreloadImages();\r\n  }, [\r\n    pagination.currentPage,\r\n    pagination.pageSize,\r\n    getMyImages,\r\n    getImageDownloadLink\r\n  ]); // Include all dependencies\r\n\r\n  const handleDownload = async (imageId) => {\r\n    try {\r\n      // First try the direct download method\r\n      console.log(`Attempting direct download for image ${imageId}`);\r\n      setImageLoadingStates(prev => ({ ...prev, [imageId]: true }));\r\n      \r\n      const directResult = await downloadImageFile(imageId);\r\n      \r\n      if (directResult.success) {\r\n        console.log(`Direct download successful for image ${imageId}`);\r\n        \r\n        // If we got an objectUrl (blob), create a download link\r\n        if (directResult.objectUrl) {\r\n          // Create a temporary anchor element to trigger download\r\n          const link = document.createElement('a');\r\n          link.href = directResult.objectUrl;\r\n          link.setAttribute('download', `image-${imageId}.jpg`);\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          document.body.removeChild(link);\r\n          \r\n          // Clean up the object URL to avoid memory leaks\r\n          setTimeout(() => URL.revokeObjectURL(directResult.objectUrl), 100);\r\n          \r\n          console.log(`Download initiated for image ${imageId} using blob`);\r\n        } \r\n        // If we got a fallback URL, open it in a new tab\r\n        else if (directResult.url) {\r\n          window.open(directResult.url, '_blank');\r\n          console.log(`Download initiated for image ${imageId} using fallback URL`);\r\n        }\r\n      } else {\r\n        // If direct download failed, fall back to the old method\r\n        console.log(`Direct download failed for image ${imageId}, falling back to link method`);\r\n        \r\n        const response = await getImageDownloadLink(imageId);\r\n        console.log(`Download link response for image ${imageId}:`, response);\r\n        \r\n        // Get the image from our state\r\n        const image = myImages.find(img => img.id === imageId);\r\n        if (!image) {\r\n          console.error(`Image ${imageId} not found in state`);\r\n          return;\r\n        }\r\n        \r\n        // Get the best available URL (local or public)\r\n        let downloadUrl;\r\n        if (response.data && response.data.ipfsUrls && response.data.ipfsUrls.local) {\r\n          downloadUrl = response.data.ipfsUrls.local;\r\n          console.log(`Using local URL from response: ${downloadUrl}`);\r\n        } else if (response.data && response.data.ipfsUrl) {\r\n          // Fallback to the original URL if the new structure isn't available\r\n          downloadUrl = response.data.ipfsUrl;\r\n          console.log(`Using original URL from response: ${downloadUrl}`);\r\n        } else {\r\n          // If no URL is available, construct one from the hash using our utility\r\n          const hash = (response.data && response.data.ipfsHash) || image.ipfs_hash;\r\n          downloadUrl = getIpfsUrl(hash);\r\n          console.log(`Constructed URL from hash: ${downloadUrl}`);\r\n        }\r\n        \r\n        // Create a temporary anchor element to trigger download\r\n        const link = document.createElement('a');\r\n        link.href = downloadUrl;\r\n        link.setAttribute('download', `image-${imageId}.jpg`);\r\n        link.setAttribute('target', '_blank');\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        \r\n        console.log(`Download initiated for image ${imageId} using fallback method`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to download image:', err);\r\n      alert('Failed to download image. Please try again later.');\r\n    } finally {\r\n      setImageLoadingStates(prev => ({ ...prev, [imageId]: false }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      \r\n      <div className=\"container\">\r\n        <div className=\"card\">\r\n          <h2>Welcome, {user?.username}!</h2>\r\n          <p>Role: {user?.role}</p>\r\n          \r\n          <div style={{ marginTop: '20px' }}>\r\n            <Link to=\"/upload\" className=\"btn\">Upload New Image</Link>\r\n            <Link to=\"/search\" className=\"btn\" style={{ marginLeft: '10px' }}>Search Similar Images</Link>\r\n            <Link to=\"/analytics\" className=\"btn\" style={{ marginLeft: '10px' }}>Analytics</Link>\r\n            <button \r\n              className=\"btn\" \r\n              style={{ marginLeft: '10px' }}\r\n              onClick={async () => {\r\n                try {\r\n                  const result = await pinAllImages();\r\n                  alert(`Pin operation completed: ${result.newly_pinned} images newly pinned, ${result.already_pinned} were already pinned, ${result.failed_pins} failed.`);\r\n                } catch (err) {\r\n                  console.error('Failed to pin images:', err);\r\n                  alert('Failed to pin images. Please try again later.');\r\n                }\r\n              }}\r\n            >\r\n              Pin All My Images\r\n            </button>\r\n            {user?.role === 'admin' && (\r\n              <>\r\n                <button \r\n                  className=\"btn\" \r\n                  style={{ marginLeft: '10px', backgroundColor: '#f0ad4e' }}\r\n                  onClick={async () => {\r\n                    if (window.confirm('Are you sure you want to run garbage collection? This will remove all unpinned content from the IPFS repository.')) {\r\n                      try {\r\n                        const result = await runGarbageCollection();\r\n                        alert(`Garbage collection completed successfully. Initial size: ${result.initial_size}, Final size: ${result.final_size}`);\r\n                      } catch (err) {\r\n                        console.error('Failed to run garbage collection:', err);\r\n                        alert('Failed to run garbage collection. Please try again later.');\r\n                      }\r\n                    }\r\n                  }}\r\n                >\r\n                  Reset IPFS Cache\r\n                </button>\r\n                <button \r\n                  className=\"btn\" \r\n                  style={{ marginLeft: '10px', backgroundColor: '#17a2b8' }}\r\n                  onClick={() => {\r\n                    // Get date range for selective garbage collection\r\n                    const startDate = prompt('Enter start date (YYYY-MM-DD) or leave empty:');\r\n                    if (startDate === null) return; // User cancelled\r\n                    \r\n                    const endDate = prompt('Enter end date (YYYY-MM-DD) or leave empty:');\r\n                    if (endDate === null) return; // User cancelled\r\n                    \r\n                    const params = {};\r\n                    if (startDate) params.start_date = startDate;\r\n                    if (endDate) params.end_date = endDate;\r\n                    \r\n                    if (window.confirm(`Are you sure you want to run selective garbage collection${startDate ? ` from ${startDate}` : ''}${endDate ? ` to ${endDate}` : ''}? This will keep pinned only the images within the specified date range.`)) {\r\n                      try {\r\n                        runSelectiveGarbageCollection(params)\r\n                          .then(result => {\r\n                            alert(`Selective garbage collection completed successfully. Kept ${result.kept_pins} images pinned, unpinned ${result.unpinned} images.`);\r\n                          })\r\n                          .catch(err => {\r\n                            console.error('Failed to run selective garbage collection:', err);\r\n                            alert('Failed to run selective garbage collection. Please try again later.');\r\n                          });\r\n                      } catch (err) {\r\n                        console.error('Failed to run selective garbage collection:', err);\r\n                        alert('Failed to run selective garbage collection. Please try again later.');\r\n                      }\r\n                    }\r\n                  }}\r\n                >\r\n                  Selective GC\r\n                </button>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        <h3 style={{ marginTop: '30px' }}>My Images</h3>\r\n        \r\n        {loading && (\r\n          <div className=\"spinner\"></div>\r\n        )}\r\n        \r\n        {error && (\r\n          <div className=\"alert alert-danger\">{error}</div>\r\n        )}\r\n        \r\n        {!loading && myImages.length === 0 && (\r\n          <div className=\"card\">\r\n            <p>You haven't uploaded any images yet.</p>\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"image-grid\" style={{ marginBottom: '20px' }}>\r\n          {myImages.map((image) => (\r\n            <div key={image.id} className=\"image-card\">\r\n              <div style={{ position: 'relative' }}>\r\n                {imageLoadingStates[image.id] ? (\r\n                  <div \r\n                    style={{ \r\n                      width: '100%', \r\n                      height: '200px',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                      backgroundColor: '#f0f0f0',\r\n                      borderTopLeftRadius: '8px',\r\n                      borderTopRightRadius: '8px'\r\n                    }}\r\n                  >\r\n                    <div className=\"spinner\" style={{ width: '40px', height: '40px' }}></div>\r\n                  </div>\r\n                ) : (\r\n                  <img \r\n                    id={`img-${image.id}`}\r\n                    src={image.ipfs_hash ? getIpfsUrl(image.ipfs_hash, true) : 'https://via.placeholder.com/300x200?text=No+IPFS+Hash'} // Handle null ipfs_hash\r\n                    alt={`ID: ${image.id}`}\r\n                    style={{ \r\n                      width: '100%', \r\n                      height: '200px', \r\n                      objectFit: 'cover',\r\n                      borderTopLeftRadius: '8px',\r\n                      borderTopRightRadius: '8px'\r\n                    }}\r\n                    onError={(e) => {\r\n                      console.log(`Image ${image.id} failed to load, attempting to recover...`);\r\n                      \r\n                      // Set loading state\r\n                      setImageLoadingStates(prev => ({ ...prev, [image.id]: true }));\r\n                      \r\n                      // Use getBestIpfsUrl with more retries if ipfs_hash exists\r\n                      if (image.ipfs_hash) {\r\n                        getBestIpfsUrl(image.ipfs_hash, 5)\r\n                          .then(bestUrl => {\r\n                            console.log(`Got best URL for image ${image.id}: ${bestUrl}`);\r\n                            e.target.src = bestUrl;\r\n                            \r\n                            // If that fails, try to pin and get a new URL\r\n                            e.target.onerror = () => {\r\n                              console.log(`Best URL failed for image ${image.id}, trying to pin...`);\r\n                              getImageDownloadLink(image.id)\r\n                                .then(response => {\r\n                                  if (response.isPinned) {\r\n                                    console.log(`Image ${image.id} is now pinned, retrying load...`);\r\n                                    // If now pinned, retry loading the image with force reload\r\n                                    e.target.src = getIpfsUrl(image.ipfs_hash, true);\r\n                                    e.target.onerror = null; // Remove this error handler\r\n                                  } else {\r\n                                    console.log(`Image ${image.id} is still not pinned, showing placeholder`);\r\n                                    // If still not pinned, show placeholder\r\n                                    e.target.onerror = null;\r\n                                    e.target.src = 'https://via.placeholder.com/300x200?text=Image+Unavailable';\r\n                                  }\r\n                                  setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n                                })\r\n                                .catch((err) => {\r\n                                  console.error(`Error getting download link for image ${image.id}:`, err);\r\n                                  // On error, show placeholder\r\n                                  e.target.onerror = null;\r\n                                  e.target.src = 'https://via.placeholder.com/300x200?text=Image+Unavailable';\r\n                                  setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n                                });\r\n                            };\r\n                          })\r\n                          .catch(err => {\r\n                            console.error(`Error getting best URL for image ${image.id}:`, err);\r\n                            setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n                          });\r\n                      } else {\r\n                        // If no IPFS hash, show placeholder immediately\r\n                        e.target.src = 'https://via.placeholder.com/300x200?text=No+IPFS+Hash';\r\n                        setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n                      }\r\n                    }}\r\n                    onLoad={() => {\r\n                      console.log(`Image ${image.id} loaded successfully`);\r\n                      setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n                    }}\r\n                  />\r\n                )}\r\n                {/* Add a refresh button to retry loading the image */}\r\n                <button \r\n                  style={{\r\n                    position: 'absolute',\r\n                    top: '5px',\r\n                    right: '5px',\r\n                    background: 'rgba(255, 255, 255, 0.7)',\r\n                    border: 'none',\r\n                    borderRadius: '50%',\r\n                    width: '30px',\r\n                    height: '30px',\r\n                    cursor: 'pointer',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center'\r\n                  }}\r\n                  onClick={() => {\r\n                    // Set loading state\r\n                    setImageLoadingStates(prev => ({ ...prev, [image.id]: true }));\r\n                    \r\n                    // Get download link to ensure image is pinned\r\n                    getImageDownloadLink(image.id)\r\n                      .then(async (response) => {\r\n                        console.log(`Refresh requested for image ${image.id}, pin status:`, response.isPinned);\r\n                        \r\n                        // If not pinned, try to pin it\r\n                        if (!response.isPinned) {\r\n                          try {\r\n                            await pinImage(image.id);\r\n                            console.log(`Manually pinned image ${image.id}`);\r\n                          } catch (err) {\r\n                            console.error(`Error pinning image ${image.id}:`, err);\r\n                          }\r\n                        }\r\n                        \r\n                        // Force reload the image\r\n                        const imgElement = document.getElementById(`img-${image.id}`);\r\n                        if (imgElement) {\r\n                          // Use getBestIpfsUrl to get the most reliable URL\r\n                          const bestUrl = await getBestIpfsUrl(image.ipfs_hash, 5);\r\n                          imgElement.src = bestUrl;\r\n                        }\r\n                        \r\n                        setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n                      })\r\n                      .catch((err) => {\r\n                        console.error(`Error refreshing image ${image.id}:`, err);\r\n                        setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n                      });\r\n                  }}\r\n                  title=\"Refresh image\"\r\n                  disabled={imageLoadingStates[image.id]}\r\n                >\r\n                  {imageLoadingStates[image.id] ? '⌛' : '↻'}\r\n                </button>\r\n              </div>\r\n                \r\n              <div className=\"image-info\">\r\n                <h3>Image #{image.id}</h3>\r\n                <p>Hash: {image.sha256_hash.substring(0, 10)}...</p>\r\n                <p>Uploaded: {new Date(image.uploaded_at).toLocaleString()}</p>\r\n                <p>Deepfake: {image.deepfake_label} ({Math.round(image.deepfake_confidence * 100)}%)</p>\r\n                \r\n                {/* Pin status indicator */}\r\n                <div style={{ \r\n                  display: 'flex', \r\n                  alignItems: 'center', \r\n                  marginBottom: '10px',\r\n                  color: image.is_pinned ? '#28a745' : '#dc3545'\r\n                }}>\r\n                  <span style={{ \r\n                    display: 'inline-block', \r\n                    width: '10px', \r\n                    height: '10px', \r\n                    borderRadius: '50%', \r\n                    backgroundColor: image.is_pinned ? '#28a745' : '#dc3545',\r\n                    marginRight: '5px'\r\n                  }}></span>\r\n                  <span>{image.is_pinned ? 'Pinned' : 'Not Pinned'}</span>\r\n                </div>\r\n                \r\n                <div className=\"image-actions\">\r\n                  <button \r\n                    className=\"btn\" \r\n                    onClick={() => handleDownload(image.id)}\r\n                  >\r\n                    Download\r\n                  </button>\r\n                  \r\n                  {/* Pin/Unpin button */}\r\n                  {image.is_pinned ? (\r\n                    <button \r\n                      className=\"btn\" \r\n                      style={{ marginLeft: '10px', backgroundColor: '#dc3545' }}\r\n                      onClick={async () => {\r\n                        try {\r\n                          await unpinImage(image.id);\r\n                          alert(`Image #${image.id} has been unpinned.`);\r\n                        } catch (err) {\r\n                          console.error('Failed to unpin image:', err);\r\n                          alert('Failed to unpin image. Please try again later.');\r\n                        }\r\n                      }}\r\n                    >\r\n                      Unpin\r\n                    </button>\r\n                  ) : (\r\n                    <button \r\n                      className=\"btn\" \r\n                      style={{ marginLeft: '10px', backgroundColor: '#28a745' }}\r\n                      onClick={async () => {\r\n                        try {\r\n                          await pinImage(image.id);\r\n                          alert(`Image #${image.id} has been pinned.`);\r\n                        } catch (err) {\r\n                          console.error('Failed to pin image:', err);\r\n                          alert('Failed to pin image. Please try again later.');\r\n                        }\r\n                      }}\r\n                    >\r\n                      Pin\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        \r\n        {/* Pagination Controls */}\r\n        {!loading && myImages.length > 0 && (\r\n          <div className=\"pagination-controls\" style={{ \r\n            display: 'flex', \r\n            justifyContent: 'center', \r\n            alignItems: 'center', \r\n            margin: '20px 0 40px' \r\n          }}>\r\n            <button \r\n              className=\"btn\" \r\n              onClick={previousPage} \r\n              disabled={!pagination.hasPrevious}\r\n              style={{ \r\n                margin: '0 5px',\r\n                opacity: pagination.hasPrevious ? 1 : 0.5,\r\n                cursor: pagination.hasPrevious ? 'pointer' : 'not-allowed'\r\n              }}\r\n            >\r\n              &laquo; Previous\r\n            </button>\r\n            \r\n            <div style={{ margin: '0 15px' }}>\r\n              {/* Page numbers */}\r\n              {Array.from({ length: pagination.totalPages }, (_, i) => i + 1).map(page => (\r\n                <button\r\n                  key={page}\r\n                  onClick={() => goToPage(page)}\r\n                  style={{\r\n                    margin: '0 5px',\r\n                    padding: '5px 10px',\r\n                    border: page === pagination.currentPage ? '2px solid #007bff' : '1px solid #ccc',\r\n                    borderRadius: '4px',\r\n                    background: page === pagination.currentPage ? '#e6f2ff' : 'white',\r\n                    cursor: 'pointer'\r\n                  }}\r\n                >\r\n                  {page}\r\n                </button>\r\n              ))}\r\n            </div>\r\n            \r\n            <button \r\n              className=\"btn\" \r\n              onClick={nextPage} \r\n              disabled={!pagination.hasNext}\r\n              style={{ \r\n                margin: '0 5px',\r\n                opacity: pagination.hasNext ? 1 : 0.5,\r\n                cursor: pagination.hasNext ? 'pointer' : 'not-allowed'\r\n              }}\r\n            >\r\n              Next &raquo;\r\n            </button>\r\n          </div>\r\n        )}\r\n        \r\n        {/* Pagination Info */}\r\n        {!loading && myImages.length > 0 && (\r\n          <div style={{ textAlign: 'center', marginBottom: '30px', color: '#666' }}>\r\n            Showing page {pagination.currentPage} of {pagination.totalPages} ({pagination.totalImages} total images)\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}