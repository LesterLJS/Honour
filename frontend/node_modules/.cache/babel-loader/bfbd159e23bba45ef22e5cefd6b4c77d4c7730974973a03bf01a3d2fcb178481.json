{"ast":null,"code":"import api from './index';\n\n/**\r\n * Upload an image to the server\r\n * @param {File} imageFile - The image file to upload\r\n * @returns {Promise} - API response with the uploaded image data\r\n */\nexport const uploadImage = imageFile => {\n  const formData = new FormData();\n  formData.append('file', imageFile);\n  return api.post('/api/images/upload/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n/**\r\n * Get IPFS download link for an image\r\n * @param {number} imageId - The ID of the image\r\n * @returns {Promise} - API response with the IPFS URLs and blockchain data\r\n */\nexport const getImageDownloadLink = async imageId => {\n  try {\n    const response = await api.get(`/api/images/download/${imageId}/`);\n\n    // Return the full response data to allow access to all URLs\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to get download link:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Directly download an image file from IPFS through the backend\r\n * @param {number} imageId - The ID of the image to download\r\n * @returns {Promise} - API response with the image file or fallback URL\r\n */\nexport const downloadImageFile = async imageId => {\n  try {\n    // First try to get the response as JSON to check for fallback status\n    try {\n      const jsonResponse = await api.get(`/api/images/download-file/${imageId}/`);\n\n      // If we get here, it means the response was JSON (likely a fallback or error)\n      if (jsonResponse.data && jsonResponse.data.status === 'fallback') {\n        console.log(`Image ${imageId} has fallback status: ${jsonResponse.data.message}`);\n        return {\n          success: false,\n          fallback: true,\n          message: jsonResponse.data.message,\n          imageId: jsonResponse.data.image_id\n        };\n      }\n    } catch (jsonError) {\n      // If this fails, it's likely because the response is a binary image, which is good\n      // Continue to the blob request below\n    }\n\n    // Use responseType 'blob' to handle binary data\n    const response = await api.get(`/api/images/download-file/${imageId}/`, {\n      responseType: 'blob'\n    });\n\n    // Check if the response is JSON (error) or binary (image)\n    const contentType = response.headers['content-type'];\n    if (contentType && contentType.includes('application/json')) {\n      // Parse JSON error response\n      const reader = new FileReader();\n      return new Promise((resolve, reject) => {\n        reader.onload = () => {\n          try {\n            const jsonResponse = JSON.parse(reader.result);\n            resolve(jsonResponse);\n          } catch (e) {\n            reject(new Error('Invalid JSON response'));\n          }\n        };\n        reader.onerror = reject;\n        reader.readAsText(response.data);\n      });\n    } else {\n      // Return the blob for image display\n      return {\n        blob: response.data,\n        contentType: contentType || 'image/jpeg'\n      };\n    }\n  } catch (error) {\n    console.error(\"Failed to download image file:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Admin: Get all images from all users\r\n * @returns {Promise} - API response with all images\r\n */\nexport const getAllImages = () => {\n  return api.get('/api/images/admin/images/');\n};\n\n/**\r\n * Admin: Delete an image\r\n * @param {number} imageId - The ID of the image to delete\r\n * @returns {Promise} - API response confirming deletion\r\n */\nexport const deleteImage = imageId => {\n  return api.delete(`/api/images/admin/images/${imageId}/`);\n};\n\n/**\r\n * Get the current user's images with pagination\r\n * @param {Object} params - Pagination parameters\r\n * @param {number} params.page - The page number to fetch\r\n * @param {number} params.page_size - Number of items per page\r\n * @returns {Promise} - API response with paginated images\r\n */\nexport const getMyImages = (params = {\n  page: 1,\n  page_size: 9\n}) => {\n  return api.get('/api/images/my-images/', {\n    params\n  });\n};","map":{"version":3,"names":["api","uploadImage","imageFile","formData","FormData","append","post","headers","getImageDownloadLink","imageId","response","get","data","error","console","downloadImageFile","jsonResponse","status","log","message","success","fallback","image_id","jsonError","responseType","contentType","includes","reader","FileReader","Promise","resolve","reject","onload","JSON","parse","result","e","Error","onerror","readAsText","blob","getAllImages","deleteImage","delete","getMyImages","params","page","page_size"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/api/images.js"],"sourcesContent":["import api from './index';\r\n\r\n/**\r\n * Upload an image to the server\r\n * @param {File} imageFile - The image file to upload\r\n * @returns {Promise} - API response with the uploaded image data\r\n */\r\nexport const uploadImage = (imageFile) => {\r\n  const formData = new FormData();\r\n  formData.append('file', imageFile);\r\n  return api.post('/api/images/upload/', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};\r\n\r\n\r\n\r\n/**\r\n * Get IPFS download link for an image\r\n * @param {number} imageId - The ID of the image\r\n * @returns {Promise} - API response with the IPFS URLs and blockchain data\r\n */\r\nexport const getImageDownloadLink = async (imageId) => {\r\n  try {\r\n    const response = await api.get(`/api/images/download/${imageId}/`);\r\n    \r\n    // Return the full response data to allow access to all URLs\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Failed to get download link:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Directly download an image file from IPFS through the backend\r\n * @param {number} imageId - The ID of the image to download\r\n * @returns {Promise} - API response with the image file or fallback URL\r\n */\r\nexport const downloadImageFile = async (imageId) => {\r\n  try {\r\n    // First try to get the response as JSON to check for fallback status\r\n    try {\r\n      const jsonResponse = await api.get(`/api/images/download-file/${imageId}/`);\r\n      \r\n      // If we get here, it means the response was JSON (likely a fallback or error)\r\n      if (jsonResponse.data && jsonResponse.data.status === 'fallback') {\r\n        console.log(`Image ${imageId} has fallback status: ${jsonResponse.data.message}`);\r\n        return {\r\n          success: false,\r\n          fallback: true,\r\n          message: jsonResponse.data.message,\r\n          imageId: jsonResponse.data.image_id\r\n        };\r\n      }\r\n    } catch (jsonError) {\r\n      // If this fails, it's likely because the response is a binary image, which is good\r\n      // Continue to the blob request below\r\n    }\r\n    \r\n    // Use responseType 'blob' to handle binary data\r\n    const response = await api.get(`/api/images/download-file/${imageId}/`, {\r\n      responseType: 'blob'\r\n    });\r\n    \r\n    // Check if the response is JSON (error) or binary (image)\r\n    const contentType = response.headers['content-type'];\r\n    \r\n    if (contentType && contentType.includes('application/json')) {\r\n      // Parse JSON error response\r\n      const reader = new FileReader();\r\n      return new Promise((resolve, reject) => {\r\n        reader.onload = () => {\r\n          try {\r\n            const jsonResponse = JSON.parse(reader.result);\r\n            resolve(jsonResponse);\r\n          } catch (e) {\r\n            reject(new Error('Invalid JSON response'));\r\n          }\r\n        };\r\n        reader.onerror = reject;\r\n        reader.readAsText(response.data);\r\n      });\r\n    } else {\r\n      // Return the blob for image display\r\n      return {\r\n        blob: response.data,\r\n        contentType: contentType || 'image/jpeg'\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Failed to download image file:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n/**\r\n * Admin: Get all images from all users\r\n * @returns {Promise} - API response with all images\r\n */\r\nexport const getAllImages = () => {\r\n  return api.get('/api/images/admin/images/');\r\n};\r\n\r\n/**\r\n * Admin: Delete an image\r\n * @param {number} imageId - The ID of the image to delete\r\n * @returns {Promise} - API response confirming deletion\r\n */\r\nexport const deleteImage = (imageId) => {\r\n  return api.delete(`/api/images/admin/images/${imageId}/`);\r\n};\r\n\r\n/**\r\n * Get the current user's images with pagination\r\n * @param {Object} params - Pagination parameters\r\n * @param {number} params.page - The page number to fetch\r\n * @param {number} params.page_size - Number of items per page\r\n * @returns {Promise} - API response with paginated images\r\n */\r\nexport const getMyImages = (params = { page: 1, page_size: 9 }) => {\r\n  return api.get('/api/images/my-images/', { params });\r\n};\r\n\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,SAAS;;AAEzB;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,SAAS,IAAK;EACxC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,SAAS,CAAC;EAClC,OAAOF,GAAG,CAACM,IAAI,CAAC,qBAAqB,EAAEH,QAAQ,EAAE;IAC/CI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,OAAO,IAAK;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,GAAG,CAACW,GAAG,CAAC,wBAAwBF,OAAO,GAAG,CAAC;;IAElE;IACA,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,iBAAiB,GAAG,MAAON,OAAO,IAAK;EAClD,IAAI;IACF;IACA,IAAI;MACF,MAAMO,YAAY,GAAG,MAAMhB,GAAG,CAACW,GAAG,CAAC,6BAA6BF,OAAO,GAAG,CAAC;;MAE3E;MACA,IAAIO,YAAY,CAACJ,IAAI,IAAII,YAAY,CAACJ,IAAI,CAACK,MAAM,KAAK,UAAU,EAAE;QAChEH,OAAO,CAACI,GAAG,CAAC,SAAST,OAAO,yBAAyBO,YAAY,CAACJ,IAAI,CAACO,OAAO,EAAE,CAAC;QACjF,OAAO;UACLC,OAAO,EAAE,KAAK;UACdC,QAAQ,EAAE,IAAI;UACdF,OAAO,EAAEH,YAAY,CAACJ,IAAI,CAACO,OAAO;UAClCV,OAAO,EAAEO,YAAY,CAACJ,IAAI,CAACU;QAC7B,CAAC;MACH;IACF,CAAC,CAAC,OAAOC,SAAS,EAAE;MAClB;MACA;IAAA;;IAGF;IACA,MAAMb,QAAQ,GAAG,MAAMV,GAAG,CAACW,GAAG,CAAC,6BAA6BF,OAAO,GAAG,EAAE;MACtEe,YAAY,EAAE;IAChB,CAAC,CAAC;;IAEF;IACA,MAAMC,WAAW,GAAGf,QAAQ,CAACH,OAAO,CAAC,cAAc,CAAC;IAEpD,IAAIkB,WAAW,IAAIA,WAAW,CAACC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3D;MACA,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtCJ,MAAM,CAACK,MAAM,GAAG,MAAM;UACpB,IAAI;YACF,MAAMhB,YAAY,GAAGiB,IAAI,CAACC,KAAK,CAACP,MAAM,CAACQ,MAAM,CAAC;YAC9CL,OAAO,CAACd,YAAY,CAAC;UACvB,CAAC,CAAC,OAAOoB,CAAC,EAAE;YACVL,MAAM,CAAC,IAAIM,KAAK,CAAC,uBAAuB,CAAC,CAAC;UAC5C;QACF,CAAC;QACDV,MAAM,CAACW,OAAO,GAAGP,MAAM;QACvBJ,MAAM,CAACY,UAAU,CAAC7B,QAAQ,CAACE,IAAI,CAAC;MAClC,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,OAAO;QACL4B,IAAI,EAAE9B,QAAQ,CAACE,IAAI;QACnBa,WAAW,EAAEA,WAAW,IAAI;MAC9B,CAAC;IACH;EACF,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;;AAID;AACA;AACA;AACA;AACA,OAAO,MAAM4B,YAAY,GAAGA,CAAA,KAAM;EAChC,OAAOzC,GAAG,CAACW,GAAG,CAAC,2BAA2B,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM+B,WAAW,GAAIjC,OAAO,IAAK;EACtC,OAAOT,GAAG,CAAC2C,MAAM,CAAC,4BAA4BlC,OAAO,GAAG,CAAC;AAC3D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMmC,WAAW,GAAGA,CAACC,MAAM,GAAG;EAAEC,IAAI,EAAE,CAAC;EAAEC,SAAS,EAAE;AAAE,CAAC,KAAK;EACjE,OAAO/C,GAAG,CAACW,GAAG,CAAC,wBAAwB,EAAE;IAAEkC;EAAO,CAAC,CAAC;AACtD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}