{"ast":null,"code":"/**\r\n * Enhanced IPFS utilities with local-only gateway usage\r\n */\n\n// Configuration\nconst IPFS_TIMEOUT = 30000; // 30 seconds\nconst MAX_RETRIES = 3;\nconst LOCAL_GATEWAY = 'http://127.0.0.1:8080/ipfs/';\n\n/**\r\n * Normalizes an IPFS hash from various formats\r\n * @param {string|object} hash - The IPFS hash/CID\r\n * @returns {string} - The normalized hash string\r\n * @throws {Error} - If hash is invalid\r\n */\nexport const normalizeIpfsHash = hash => {\n  if (!hash) {\n    console.warn('Empty IPFS hash provided');\n    return null;\n  }\n\n  // Extract hash from object if needed\n  if (typeof hash === 'object') {\n    hash = hash.cid || hash.Hash || hash.hash || hash.ipfs_hash;\n  }\n\n  // Handle string that might be JSON\n  if (typeof hash === 'string' && hash.startsWith('{')) {\n    try {\n      const parsed = JSON.parse(hash);\n      hash = parsed.cid || parsed.Hash || parsed.hash || parsed.ipfs_hash;\n    } catch (e) {\n      // If parsing fails, use the string as-is\n      console.warn('Failed to parse IPFS hash JSON:', e);\n    }\n  }\n\n  // Validate hash format\n  if (!hash || typeof hash !== 'string' || hash.length < 10) {\n    console.warn(`Invalid IPFS hash format: ${hash}`);\n    return null;\n  }\n  return hash;\n};\n\n/**\r\n * Check if local gateway is accessible\r\n * @param {string} gateway - Gateway URL to check\r\n * @returns {Promise<boolean>} - True if gateway is accessible\r\n */\nconst isGatewayAccessible = async gateway => {\n  try {\n    const response = await fetch(`${gateway}QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/readme`, {\n      method: 'HEAD',\n      timeout: 5000\n    });\n    return response.ok;\n  } catch {\n    return false;\n  }\n};\n\n/**\r\n * Check if an image is accessible with progressive loading support\r\n * @param {string} url - Image URL to check\r\n * @param {Object} options - Options for checking\r\n * @param {number} [options.timeout=5000] - Timeout in milliseconds\r\n * @param {Function} [options.onProgress] - Progress callback\r\n * @returns {Promise<boolean>} - True if image is accessible\r\n */\nexport const isImageAccessible = async (url, options = {}) => {\n  const {\n    timeout = 5000,\n    onProgress\n  } = options;\n  return new Promise(resolve => {\n    const img = new Image();\n    let timeoutId;\n    const cleanup = () => {\n      if (timeoutId) clearTimeout(timeoutId);\n      img.onload = img.onerror = null;\n    };\n    if (onProgress) {\n      img.onprogress = event => {\n        if (event.lengthComputable) {\n          onProgress(event.loaded / event.total);\n        }\n      };\n    }\n    img.onload = () => {\n      cleanup();\n      resolve(true);\n    };\n    img.onerror = () => {\n      cleanup();\n      resolve(false);\n    };\n    timeoutId = setTimeout(() => {\n      cleanup();\n      resolve(false);\n    }, timeout);\n    img.src = url;\n  });\n};","map":{"version":3,"names":["IPFS_TIMEOUT","MAX_RETRIES","LOCAL_GATEWAY","normalizeIpfsHash","hash","console","warn","cid","Hash","ipfs_hash","startsWith","parsed","JSON","parse","e","length","isGatewayAccessible","gateway","response","fetch","method","timeout","ok","isImageAccessible","url","options","onProgress","Promise","resolve","img","Image","timeoutId","cleanup","clearTimeout","onload","onerror","onprogress","event","lengthComputable","loaded","total","setTimeout","src"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/util/ipfs.js"],"sourcesContent":["/**\r\n * Enhanced IPFS utilities with local-only gateway usage\r\n */\r\n\r\n// Configuration\r\nconst IPFS_TIMEOUT = 30000; // 30 seconds\r\nconst MAX_RETRIES = 3;\r\nconst LOCAL_GATEWAY = 'http://127.0.0.1:8080/ipfs/';\r\n\r\n/**\r\n * Normalizes an IPFS hash from various formats\r\n * @param {string|object} hash - The IPFS hash/CID\r\n * @returns {string} - The normalized hash string\r\n * @throws {Error} - If hash is invalid\r\n */\r\nexport const normalizeIpfsHash = (hash) => {\r\n  if (!hash) {\r\n    console.warn('Empty IPFS hash provided');\r\n    return null;\r\n  }\r\n  \r\n  // Extract hash from object if needed\r\n  if (typeof hash === 'object') {\r\n    hash = hash.cid || hash.Hash || hash.hash || hash.ipfs_hash;\r\n  }\r\n  \r\n  // Handle string that might be JSON\r\n  if (typeof hash === 'string' && hash.startsWith('{')) {\r\n    try {\r\n      const parsed = JSON.parse(hash);\r\n      hash = parsed.cid || parsed.Hash || parsed.hash || parsed.ipfs_hash;\r\n    } catch (e) {\r\n      // If parsing fails, use the string as-is\r\n      console.warn('Failed to parse IPFS hash JSON:', e);\r\n    }\r\n  }\r\n  \r\n  // Validate hash format\r\n  if (!hash || typeof hash !== 'string' || hash.length < 10) {\r\n    console.warn(`Invalid IPFS hash format: ${hash}`);\r\n    return null;\r\n  }\r\n  \r\n  return hash;\r\n};\r\n\r\n/**\r\n * Check if local gateway is accessible\r\n * @param {string} gateway - Gateway URL to check\r\n * @returns {Promise<boolean>} - True if gateway is accessible\r\n */\r\nconst isGatewayAccessible = async (gateway) => {\r\n  try {\r\n    const response = await fetch(`${gateway}QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/readme`, {\r\n      method: 'HEAD',\r\n      timeout: 5000\r\n    });\r\n    return response.ok;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\n\r\n/**\r\n * Check if an image is accessible with progressive loading support\r\n * @param {string} url - Image URL to check\r\n * @param {Object} options - Options for checking\r\n * @param {number} [options.timeout=5000] - Timeout in milliseconds\r\n * @param {Function} [options.onProgress] - Progress callback\r\n * @returns {Promise<boolean>} - True if image is accessible\r\n */\r\nexport const isImageAccessible = async (url, options = {}) => {\r\n  const { timeout = 5000, onProgress } = options;\r\n  \r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    let timeoutId;\r\n    \r\n    const cleanup = () => {\r\n      if (timeoutId) clearTimeout(timeoutId);\r\n      img.onload = img.onerror = null;\r\n    };\r\n    \r\n    if (onProgress) {\r\n      img.onprogress = (event) => {\r\n        if (event.lengthComputable) {\r\n          onProgress(event.loaded / event.total);\r\n        }\r\n      };\r\n    }\r\n    \r\n    img.onload = () => {\r\n      cleanup();\r\n      resolve(true);\r\n    };\r\n    \r\n    img.onerror = () => {\r\n      cleanup();\r\n      resolve(false);\r\n    };\r\n    \r\n    timeoutId = setTimeout(() => {\r\n      cleanup();\r\n      resolve(false);\r\n    }, timeout);\r\n    \r\n    img.src = url;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,MAAMA,YAAY,GAAG,KAAK,CAAC,CAAC;AAC5B,MAAMC,WAAW,GAAG,CAAC;AACrB,MAAMC,aAAa,GAAG,6BAA6B;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EACzC,IAAI,CAACA,IAAI,EAAE;IACTC,OAAO,CAACC,IAAI,CAAC,0BAA0B,CAAC;IACxC,OAAO,IAAI;EACb;;EAEA;EACA,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;IAC5BA,IAAI,GAAGA,IAAI,CAACG,GAAG,IAAIH,IAAI,CAACI,IAAI,IAAIJ,IAAI,CAACA,IAAI,IAAIA,IAAI,CAACK,SAAS;EAC7D;;EAEA;EACA,IAAI,OAAOL,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACM,UAAU,CAAC,GAAG,CAAC,EAAE;IACpD,IAAI;MACF,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACT,IAAI,CAAC;MAC/BA,IAAI,GAAGO,MAAM,CAACJ,GAAG,IAAII,MAAM,CAACH,IAAI,IAAIG,MAAM,CAACP,IAAI,IAAIO,MAAM,CAACF,SAAS;IACrE,CAAC,CAAC,OAAOK,CAAC,EAAE;MACV;MACAT,OAAO,CAACC,IAAI,CAAC,iCAAiC,EAAEQ,CAAC,CAAC;IACpD;EACF;;EAEA;EACA,IAAI,CAACV,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACW,MAAM,GAAG,EAAE,EAAE;IACzDV,OAAO,CAACC,IAAI,CAAC,6BAA6BF,IAAI,EAAE,CAAC;IACjD,OAAO,IAAI;EACb;EAEA,OAAOA,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMY,mBAAmB,GAAG,MAAOC,OAAO,IAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGF,OAAO,uDAAuD,EAAE;MAC9FG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;IACX,CAAC,CAAC;IACF,OAAOH,QAAQ,CAACI,EAAE;EACpB,CAAC,CAAC,MAAM;IACN,OAAO,KAAK;EACd;AACF,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC5D,MAAM;IAAEJ,OAAO,GAAG,IAAI;IAAEK;EAAW,CAAC,GAAGD,OAAO;EAE9C,OAAO,IAAIE,OAAO,CAAEC,OAAO,IAAK;IAC9B,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;IACvB,IAAIC,SAAS;IAEb,MAAMC,OAAO,GAAGA,CAAA,KAAM;MACpB,IAAID,SAAS,EAAEE,YAAY,CAACF,SAAS,CAAC;MACtCF,GAAG,CAACK,MAAM,GAAGL,GAAG,CAACM,OAAO,GAAG,IAAI;IACjC,CAAC;IAED,IAAIT,UAAU,EAAE;MACdG,GAAG,CAACO,UAAU,GAAIC,KAAK,IAAK;QAC1B,IAAIA,KAAK,CAACC,gBAAgB,EAAE;UAC1BZ,UAAU,CAACW,KAAK,CAACE,MAAM,GAAGF,KAAK,CAACG,KAAK,CAAC;QACxC;MACF,CAAC;IACH;IAEAX,GAAG,CAACK,MAAM,GAAG,MAAM;MACjBF,OAAO,CAAC,CAAC;MACTJ,OAAO,CAAC,IAAI,CAAC;IACf,CAAC;IAEDC,GAAG,CAACM,OAAO,GAAG,MAAM;MAClBH,OAAO,CAAC,CAAC;MACTJ,OAAO,CAAC,KAAK,CAAC;IAChB,CAAC;IAEDG,SAAS,GAAGU,UAAU,CAAC,MAAM;MAC3BT,OAAO,CAAC,CAAC;MACTJ,OAAO,CAAC,KAAK,CAAC;IAChB,CAAC,EAAEP,OAAO,CAAC;IAEXQ,GAAG,CAACa,GAAG,GAAGlB,GAAG;EACf,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}