{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Erwachens\\\\Desktop\\\\MyProject\\\\frontend\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { useImages } from '../context/ImageContext';\nimport Navbar from '../components/common/Navbar';\nimport { getIpfsUrl, getBestIpfsUrl } from '../util/ipfs';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const {\n    myImages,\n    loading,\n    error,\n    pagination,\n    getMyImages,\n    getImageDownloadLink,\n    downloadImageFile,\n    pinAllImages,\n    pinImage,\n    unpinImage,\n    runGarbageCollection,\n    runSelectiveGarbageCollection,\n    nextPage,\n    previousPage,\n    goToPage\n  } = useImages();\n\n  // Add state to track loading status of individual images\n  const [imageLoadingStates, setImageLoadingStates] = useState({});\n  useEffect(() => {\n    // Fetch user's images when component mounts and preload them\n    const loadAndPreloadImages = async () => {\n      try {\n        const response = await getMyImages(1, 9); // Start with page 1, 9 images per page\n        const images = response.results || [];\n\n        // Preload each image in parallel\n        const preloadPromises = images.map(async image => {\n          setImageLoadingStates(prev => ({\n            ...prev,\n            [image.id]: true\n          }));\n          try {\n            // Get download link which will attempt to pin if not pinned\n            await getImageDownloadLink(image.id);\n            console.log(`Preloaded image ${image.id}`);\n          } catch (err) {\n            console.error(`Failed to preload image ${image.id}:`, err);\n          } finally {\n            setImageLoadingStates(prev => ({\n              ...prev,\n              [image.id]: false\n            }));\n          }\n        });\n\n        // Wait for all preload operations to complete\n        await Promise.allSettled(preloadPromises);\n      } catch (err) {\n        console.error('Failed to load images:', err);\n      }\n    };\n    loadAndPreloadImages();\n  }, []);\n  const handleDownload = async imageId => {\n    try {\n      // First try the direct download method\n      console.log(`Attempting direct download for image ${imageId}`);\n      setImageLoadingStates(prev => ({\n        ...prev,\n        [imageId]: true\n      }));\n      const directResult = await downloadImageFile(imageId);\n      if (directResult.success) {\n        console.log(`Direct download successful for image ${imageId}`);\n\n        // If we got an objectUrl (blob), create a download link\n        if (directResult.objectUrl) {\n          // Create a temporary anchor element to trigger download\n          const link = document.createElement('a');\n          link.href = directResult.objectUrl;\n          link.setAttribute('download', `image-${imageId}.jpg`);\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n\n          // Clean up the object URL to avoid memory leaks\n          setTimeout(() => URL.revokeObjectURL(directResult.objectUrl), 100);\n          console.log(`Download initiated for image ${imageId} using blob`);\n        }\n        // If we got a fallback URL, open it in a new tab\n        else if (directResult.url) {\n          window.open(directResult.url, '_blank');\n          console.log(`Download initiated for image ${imageId} using fallback URL`);\n        }\n      } else {\n        // If direct download failed, fall back to the old method\n        console.log(`Direct download failed for image ${imageId}, falling back to link method`);\n        const response = await getImageDownloadLink(imageId);\n        console.log(`Download link response for image ${imageId}:`, response);\n\n        // Get the image from our state\n        const image = myImages.find(img => img.id === imageId);\n        if (!image) {\n          console.error(`Image ${imageId} not found in state`);\n          return;\n        }\n\n        // Get the best available URL (local or public)\n        let downloadUrl;\n        if (response.data && response.data.ipfsUrls && response.data.ipfsUrls.local) {\n          downloadUrl = response.data.ipfsUrls.local;\n          console.log(`Using local URL from response: ${downloadUrl}`);\n        } else if (response.data && response.data.ipfsUrl) {\n          // Fallback to the original URL if the new structure isn't available\n          downloadUrl = response.data.ipfsUrl;\n          console.log(`Using original URL from response: ${downloadUrl}`);\n        } else {\n          // If no URL is available, construct one from the hash using our utility\n          const hash = response.data && response.data.ipfsHash || image.ipfs_hash;\n          downloadUrl = getIpfsUrl(hash);\n          console.log(`Constructed URL from hash: ${downloadUrl}`);\n        }\n\n        // Create a temporary anchor element to trigger download\n        const link = document.createElement('a');\n        link.href = downloadUrl;\n        link.setAttribute('download', `image-${imageId}.jpg`);\n        link.setAttribute('target', '_blank');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        console.log(`Download initiated for image ${imageId} using fallback method`);\n      }\n    } catch (err) {\n      console.error('Failed to download image:', err);\n      alert('Failed to download image. Please try again later.');\n    } finally {\n      setImageLoadingStates(prev => ({\n        ...prev,\n        [imageId]: false\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Welcome, \", user === null || user === void 0 ? void 0 : user.username, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Role: \", user === null || user === void 0 ? void 0 : user.role]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/upload\",\n            className: \"btn\",\n            children: \"Upload New Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/search\",\n            className: \"btn\",\n            style: {\n              marginLeft: '10px'\n            },\n            children: \"Search Similar Images\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/analytics\",\n            className: \"btn\",\n            style: {\n              marginLeft: '10px'\n            },\n            children: \"Analytics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            style: {\n              marginLeft: '10px'\n            },\n            onClick: async () => {\n              try {\n                const result = await pinAllImages();\n                alert(`Pin operation completed: ${result.newly_pinned} images newly pinned, ${result.already_pinned} were already pinned, ${result.failed_pins} failed.`);\n              } catch (err) {\n                console.error('Failed to pin images:', err);\n                alert('Failed to pin images. Please try again later.');\n              }\n            },\n            children: \"Pin All My Images\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), (user === null || user === void 0 ? void 0 : user.role) === 'admin' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              style: {\n                marginLeft: '10px',\n                backgroundColor: '#f0ad4e'\n              },\n              onClick: async () => {\n                if (window.confirm('Are you sure you want to run garbage collection? This will remove all unpinned content from the IPFS repository.')) {\n                  try {\n                    const result = await runGarbageCollection();\n                    alert(`Garbage collection completed successfully. Initial size: ${result.initial_size}, Final size: ${result.final_size}`);\n                  } catch (err) {\n                    console.error('Failed to run garbage collection:', err);\n                    alert('Failed to run garbage collection. Please try again later.');\n                  }\n                }\n              },\n              children: \"Reset IPFS Cache\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              style: {\n                marginLeft: '10px',\n                backgroundColor: '#17a2b8'\n              },\n              onClick: () => {\n                // Get date range for selective garbage collection\n                const startDate = prompt('Enter start date (YYYY-MM-DD) or leave empty:');\n                if (startDate === null) return; // User cancelled\n\n                const endDate = prompt('Enter end date (YYYY-MM-DD) or leave empty:');\n                if (endDate === null) return; // User cancelled\n\n                const params = {};\n                if (startDate) params.start_date = startDate;\n                if (endDate) params.end_date = endDate;\n                if (window.confirm(`Are you sure you want to run selective garbage collection${startDate ? ` from ${startDate}` : ''}${endDate ? ` to ${endDate}` : ''}? This will keep pinned only the images within the specified date range.`)) {\n                  try {\n                    runSelectiveGarbageCollection(params).then(result => {\n                      alert(`Selective garbage collection completed successfully. Kept ${result.kept_pins} images pinned, unpinned ${result.unpinned} images.`);\n                    }).catch(err => {\n                      console.error('Failed to run selective garbage collection:', err);\n                      alert('Failed to run selective garbage collection. Please try again later.');\n                    });\n                  } catch (err) {\n                    console.error('Failed to run selective garbage collection:', err);\n                    alert('Failed to run selective garbage collection. Please try again later.');\n                  }\n                }\n              },\n              children: \"Selective GC\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: '30px'\n        },\n        children: \"My Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this), !loading && myImages.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You haven't uploaded any images yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-grid\",\n        style: {\n          marginBottom: '20px'\n        },\n        children: myImages.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'relative'\n            },\n            children: [imageLoadingStates[image.id] ? /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: '100%',\n                height: '200px',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: '#f0f0f0',\n                borderTopLeftRadius: '8px',\n                borderTopRightRadius: '8px'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"spinner\",\n                style: {\n                  width: '40px',\n                  height: '40px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n              id: `img-${image.id}`,\n              src: getIpfsUrl(image.ipfs_hash, true) // Always use force reload for initial load\n              ,\n              alt: `ID: ${image.id}`,\n              style: {\n                width: '100%',\n                height: '200px',\n                objectFit: 'cover',\n                borderTopLeftRadius: '8px',\n                borderTopRightRadius: '8px'\n              },\n              onError: e => {\n                console.log(`Image ${image.id} failed to load, attempting to recover...`);\n\n                // Set loading state\n                setImageLoadingStates(prev => ({\n                  ...prev,\n                  [image.id]: true\n                }));\n\n                // Use getBestIpfsUrl with more retries\n                getBestIpfsUrl(image.ipfs_hash, 5).then(bestUrl => {\n                  console.log(`Got best URL for image ${image.id}: ${bestUrl}`);\n                  e.target.src = bestUrl;\n\n                  // If that fails, try to pin and get a new URL\n                  e.target.onerror = () => {\n                    console.log(`Best URL failed for image ${image.id}, trying to pin...`);\n                    getImageDownloadLink(image.id).then(response => {\n                      if (response.isPinned) {\n                        console.log(`Image ${image.id} is now pinned, retrying load...`);\n                        // If now pinned, retry loading the image with force reload\n                        e.target.src = getIpfsUrl(image.ipfs_hash, true);\n                        e.target.onerror = null; // Remove this error handler\n                      } else {\n                        console.log(`Image ${image.id} is still not pinned, showing placeholder`);\n                        // If still not pinned, show placeholder\n                        e.target.onerror = null;\n                        e.target.src = 'https://via.placeholder.com/300x200?text=Image+Unavailable';\n                      }\n                      setImageLoadingStates(prev => ({\n                        ...prev,\n                        [image.id]: false\n                      }));\n                    }).catch(err => {\n                      console.error(`Error getting download link for image ${image.id}:`, err);\n                      // On error, show placeholder\n                      e.target.onerror = null;\n                      e.target.src = 'https://via.placeholder.com/300x200?text=Image+Unavailable';\n                      setImageLoadingStates(prev => ({\n                        ...prev,\n                        [image.id]: false\n                      }));\n                    });\n                  };\n                }).catch(err => {\n                  console.error(`Error getting best URL for image ${image.id}:`, err);\n                  setImageLoadingStates(prev => ({\n                    ...prev,\n                    [image.id]: false\n                  }));\n                });\n              },\n              onLoad: () => {\n                console.log(`Image ${image.id} loaded successfully`);\n                setImageLoadingStates(prev => ({\n                  ...prev,\n                  [image.id]: false\n                }));\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                position: 'absolute',\n                top: '5px',\n                right: '5px',\n                background: 'rgba(255, 255, 255, 0.7)',\n                border: 'none',\n                borderRadius: '50%',\n                width: '30px',\n                height: '30px',\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              },\n              onClick: () => {\n                // Set loading state\n                setImageLoadingStates(prev => ({\n                  ...prev,\n                  [image.id]: true\n                }));\n\n                // Get download link to ensure image is pinned\n                getImageDownloadLink(image.id).then(async response => {\n                  console.log(`Refresh requested for image ${image.id}, pin status:`, response.isPinned);\n\n                  // If not pinned, try to pin it\n                  if (!response.isPinned) {\n                    try {\n                      await pinImage(image.id);\n                      console.log(`Manually pinned image ${image.id}`);\n                    } catch (err) {\n                      console.error(`Error pinning image ${image.id}:`, err);\n                    }\n                  }\n\n                  // Force reload the image\n                  const imgElement = document.getElementById(`img-${image.id}`);\n                  if (imgElement) {\n                    // Use getBestIpfsUrl to get the most reliable URL\n                    const bestUrl = await getBestIpfsUrl(image.ipfs_hash, 5);\n                    imgElement.src = bestUrl;\n                  }\n                  setImageLoadingStates(prev => ({\n                    ...prev,\n                    [image.id]: false\n                  }));\n                }).catch(err => {\n                  console.error(`Error refreshing image ${image.id}:`, err);\n                  setImageLoadingStates(prev => ({\n                    ...prev,\n                    [image.id]: false\n                  }));\n                });\n              },\n              title: \"Refresh image\",\n              disabled: imageLoadingStates[image.id],\n              children: imageLoadingStates[image.id] ? '⌛' : '↻'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Image #\", image.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Hash: \", image.sha256_hash.substring(0, 10), \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Uploaded: \", new Date(image.uploaded_at).toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Deepfake: \", image.deepfake_label, \" (\", Math.round(image.deepfake_confidence * 100), \"%)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                marginBottom: '10px',\n                color: image.is_pinned ? '#28a745' : '#dc3545'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  display: 'inline-block',\n                  width: '10px',\n                  height: '10px',\n                  borderRadius: '50%',\n                  backgroundColor: image.is_pinned ? '#28a745' : '#dc3545',\n                  marginRight: '5px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: image.is_pinned ? 'Pinned' : 'Not Pinned'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"image-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                onClick: () => handleDownload(image.id),\n                children: \"Download\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 19\n              }, this), image.is_pinned ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                style: {\n                  marginLeft: '10px',\n                  backgroundColor: '#dc3545'\n                },\n                onClick: async () => {\n                  try {\n                    await unpinImage(image.id);\n                    alert(`Image #${image.id} has been unpinned.`);\n                  } catch (err) {\n                    console.error('Failed to unpin image:', err);\n                    alert('Failed to unpin image. Please try again later.');\n                  }\n                },\n                children: \"Unpin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                style: {\n                  marginLeft: '10px',\n                  backgroundColor: '#28a745'\n                },\n                onClick: async () => {\n                  try {\n                    await pinImage(image.id);\n                    alert(`Image #${image.id} has been pinned.`);\n                  } catch (err) {\n                    console.error('Failed to pin image:', err);\n                    alert('Failed to pin image. Please try again later.');\n                  }\n                },\n                children: \"Pin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 17\n            }, this), !loading && myImages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pagination-controls\",\n              style: {\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                margin: '20px 0 40px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                onClick: previousPage,\n                disabled: !pagination.hasPrevious,\n                style: {\n                  margin: '0 5px',\n                  opacity: pagination.hasPrevious ? 1 : 0.5,\n                  cursor: pagination.hasPrevious ? 'pointer' : 'not-allowed'\n                },\n                children: \"\\xAB Previous\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  margin: '0 15px'\n                },\n                children: Array.from({\n                  length: pagination.totalPages\n                }, (_, i) => i + 1).map(page => /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => goToPage(page),\n                  style: {\n                    margin: '0 5px',\n                    padding: '5px 10px',\n                    border: page === pagination.currentPage ? '2px solid #007bff' : '1px solid #ccc',\n                    borderRadius: '4px',\n                    background: page === pagination.currentPage ? '#e6f2ff' : 'white',\n                    cursor: 'pointer'\n                  },\n                  children: page\n                }, page, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 473,\n                  columnNumber: 17\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                onClick: nextPage,\n                disabled: !pagination.hasNext,\n                style: {\n                  margin: '0 5px',\n                  opacity: pagination.hasNext ? 1 : 0.5,\n                  cursor: pagination.hasNext ? 'pointer' : 'not-allowed'\n                },\n                children: \"Next \\xBB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 11\n            }, this), !loading && myImages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                textAlign: 'center',\n                marginBottom: '30px',\n                color: '#666'\n              },\n              children: [\"Showing page \", pagination.currentPage, \" of \", pagination.totalPages, \" (\", pagination.totalImages, \" total images)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 15\n          }, this)]\n        }, image.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"QtlkFIYJpA3Chiu0jcIU/N83GFg=\", false, function () {\n  return [useAuth, useImages];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Link","useAuth","useImages","Navbar","getIpfsUrl","getBestIpfsUrl","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","user","myImages","loading","error","pagination","getMyImages","getImageDownloadLink","downloadImageFile","pinAllImages","pinImage","unpinImage","runGarbageCollection","runSelectiveGarbageCollection","nextPage","previousPage","goToPage","imageLoadingStates","setImageLoadingStates","loadAndPreloadImages","response","images","results","preloadPromises","map","image","prev","id","console","log","err","Promise","allSettled","handleDownload","imageId","directResult","success","objectUrl","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","setTimeout","URL","revokeObjectURL","url","window","open","find","img","downloadUrl","data","ipfsUrls","local","ipfsUrl","hash","ipfsHash","ipfs_hash","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","className","username","role","style","marginTop","to","marginLeft","onClick","result","newly_pinned","already_pinned","failed_pins","backgroundColor","confirm","initial_size","final_size","startDate","prompt","endDate","params","start_date","end_date","then","kept_pins","unpinned","catch","length","marginBottom","position","width","height","display","alignItems","justifyContent","borderTopLeftRadius","borderTopRightRadius","src","alt","objectFit","onError","e","bestUrl","target","onerror","isPinned","onLoad","top","right","background","border","borderRadius","cursor","imgElement","getElementById","title","disabled","sha256_hash","substring","Date","uploaded_at","toLocaleString","deepfake_label","Math","round","deepfake_confidence","color","is_pinned","marginRight","margin","hasPrevious","opacity","Array","from","totalPages","_","i","page","padding","currentPage","hasNext","textAlign","totalImages","_c","$RefreshReg$"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/pages/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { useImages } from '../context/ImageContext';\r\nimport Navbar from '../components/common/Navbar';\r\nimport { getIpfsUrl, getBestIpfsUrl } from '../util/ipfs';\r\n\r\nconst Dashboard = () => {\r\n  const { user } = useAuth();\r\n  const { \r\n    myImages, \r\n    loading, \r\n    error, \r\n    pagination,\r\n    getMyImages, \r\n    getImageDownloadLink,\r\n    downloadImageFile,\r\n    pinAllImages,\r\n    pinImage,\r\n    unpinImage,\r\n    runGarbageCollection,\r\n    runSelectiveGarbageCollection,\r\n    nextPage,\r\n    previousPage,\r\n    goToPage\r\n  } = useImages();\r\n\r\n  // Add state to track loading status of individual images\r\n  const [imageLoadingStates, setImageLoadingStates] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Fetch user's images when component mounts and preload them\r\n    const loadAndPreloadImages = async () => {\r\n      try {\r\n        const response = await getMyImages(1, 9); // Start with page 1, 9 images per page\r\n        const images = response.results || [];\r\n        \r\n        // Preload each image in parallel\r\n        const preloadPromises = images.map(async (image) => {\r\n          setImageLoadingStates(prev => ({ ...prev, [image.id]: true }));\r\n          try {\r\n            // Get download link which will attempt to pin if not pinned\r\n            await getImageDownloadLink(image.id);\r\n            console.log(`Preloaded image ${image.id}`);\r\n          } catch (err) {\r\n            console.error(`Failed to preload image ${image.id}:`, err);\r\n          } finally {\r\n            setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n          }\r\n        });\r\n        \r\n        // Wait for all preload operations to complete\r\n        await Promise.allSettled(preloadPromises);\r\n      } catch (err) {\r\n        console.error('Failed to load images:', err);\r\n      }\r\n    };\r\n    \r\n    loadAndPreloadImages();\r\n  }, []);\r\n\r\n  const handleDownload = async (imageId) => {\r\n    try {\r\n      // First try the direct download method\r\n      console.log(`Attempting direct download for image ${imageId}`);\r\n      setImageLoadingStates(prev => ({ ...prev, [imageId]: true }));\r\n      \r\n      const directResult = await downloadImageFile(imageId);\r\n      \r\n      if (directResult.success) {\r\n        console.log(`Direct download successful for image ${imageId}`);\r\n        \r\n        // If we got an objectUrl (blob), create a download link\r\n        if (directResult.objectUrl) {\r\n          // Create a temporary anchor element to trigger download\r\n          const link = document.createElement('a');\r\n          link.href = directResult.objectUrl;\r\n          link.setAttribute('download', `image-${imageId}.jpg`);\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          document.body.removeChild(link);\r\n          \r\n          // Clean up the object URL to avoid memory leaks\r\n          setTimeout(() => URL.revokeObjectURL(directResult.objectUrl), 100);\r\n          \r\n          console.log(`Download initiated for image ${imageId} using blob`);\r\n        } \r\n        // If we got a fallback URL, open it in a new tab\r\n        else if (directResult.url) {\r\n          window.open(directResult.url, '_blank');\r\n          console.log(`Download initiated for image ${imageId} using fallback URL`);\r\n        }\r\n      } else {\r\n        // If direct download failed, fall back to the old method\r\n        console.log(`Direct download failed for image ${imageId}, falling back to link method`);\r\n        \r\n        const response = await getImageDownloadLink(imageId);\r\n        console.log(`Download link response for image ${imageId}:`, response);\r\n        \r\n        // Get the image from our state\r\n        const image = myImages.find(img => img.id === imageId);\r\n        if (!image) {\r\n          console.error(`Image ${imageId} not found in state`);\r\n          return;\r\n        }\r\n        \r\n        // Get the best available URL (local or public)\r\n        let downloadUrl;\r\n        if (response.data && response.data.ipfsUrls && response.data.ipfsUrls.local) {\r\n          downloadUrl = response.data.ipfsUrls.local;\r\n          console.log(`Using local URL from response: ${downloadUrl}`);\r\n        } else if (response.data && response.data.ipfsUrl) {\r\n          // Fallback to the original URL if the new structure isn't available\r\n          downloadUrl = response.data.ipfsUrl;\r\n          console.log(`Using original URL from response: ${downloadUrl}`);\r\n        } else {\r\n          // If no URL is available, construct one from the hash using our utility\r\n          const hash = (response.data && response.data.ipfsHash) || image.ipfs_hash;\r\n          downloadUrl = getIpfsUrl(hash);\r\n          console.log(`Constructed URL from hash: ${downloadUrl}`);\r\n        }\r\n        \r\n        // Create a temporary anchor element to trigger download\r\n        const link = document.createElement('a');\r\n        link.href = downloadUrl;\r\n        link.setAttribute('download', `image-${imageId}.jpg`);\r\n        link.setAttribute('target', '_blank');\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        \r\n        console.log(`Download initiated for image ${imageId} using fallback method`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to download image:', err);\r\n      alert('Failed to download image. Please try again later.');\r\n    } finally {\r\n      setImageLoadingStates(prev => ({ ...prev, [imageId]: false }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      \r\n      <div className=\"container\">\r\n        <div className=\"card\">\r\n          <h2>Welcome, {user?.username}!</h2>\r\n          <p>Role: {user?.role}</p>\r\n          \r\n          <div style={{ marginTop: '20px' }}>\r\n            <Link to=\"/upload\" className=\"btn\">Upload New Image</Link>\r\n            <Link to=\"/search\" className=\"btn\" style={{ marginLeft: '10px' }}>Search Similar Images</Link>\r\n            <Link to=\"/analytics\" className=\"btn\" style={{ marginLeft: '10px' }}>Analytics</Link>\r\n            <button \r\n              className=\"btn\" \r\n              style={{ marginLeft: '10px' }}\r\n              onClick={async () => {\r\n                try {\r\n                  const result = await pinAllImages();\r\n                  alert(`Pin operation completed: ${result.newly_pinned} images newly pinned, ${result.already_pinned} were already pinned, ${result.failed_pins} failed.`);\r\n                } catch (err) {\r\n                  console.error('Failed to pin images:', err);\r\n                  alert('Failed to pin images. Please try again later.');\r\n                }\r\n              }}\r\n            >\r\n              Pin All My Images\r\n            </button>\r\n            {user?.role === 'admin' && (\r\n              <>\r\n                <button \r\n                  className=\"btn\" \r\n                  style={{ marginLeft: '10px', backgroundColor: '#f0ad4e' }}\r\n                  onClick={async () => {\r\n                    if (window.confirm('Are you sure you want to run garbage collection? This will remove all unpinned content from the IPFS repository.')) {\r\n                      try {\r\n                        const result = await runGarbageCollection();\r\n                        alert(`Garbage collection completed successfully. Initial size: ${result.initial_size}, Final size: ${result.final_size}`);\r\n                      } catch (err) {\r\n                        console.error('Failed to run garbage collection:', err);\r\n                        alert('Failed to run garbage collection. Please try again later.');\r\n                      }\r\n                    }\r\n                  }}\r\n                >\r\n                  Reset IPFS Cache\r\n                </button>\r\n                <button \r\n                  className=\"btn\" \r\n                  style={{ marginLeft: '10px', backgroundColor: '#17a2b8' }}\r\n                  onClick={() => {\r\n                    // Get date range for selective garbage collection\r\n                    const startDate = prompt('Enter start date (YYYY-MM-DD) or leave empty:');\r\n                    if (startDate === null) return; // User cancelled\r\n                    \r\n                    const endDate = prompt('Enter end date (YYYY-MM-DD) or leave empty:');\r\n                    if (endDate === null) return; // User cancelled\r\n                    \r\n                    const params = {};\r\n                    if (startDate) params.start_date = startDate;\r\n                    if (endDate) params.end_date = endDate;\r\n                    \r\n                    if (window.confirm(`Are you sure you want to run selective garbage collection${startDate ? ` from ${startDate}` : ''}${endDate ? ` to ${endDate}` : ''}? This will keep pinned only the images within the specified date range.`)) {\r\n                      try {\r\n                        runSelectiveGarbageCollection(params)\r\n                          .then(result => {\r\n                            alert(`Selective garbage collection completed successfully. Kept ${result.kept_pins} images pinned, unpinned ${result.unpinned} images.`);\r\n                          })\r\n                          .catch(err => {\r\n                            console.error('Failed to run selective garbage collection:', err);\r\n                            alert('Failed to run selective garbage collection. Please try again later.');\r\n                          });\r\n                      } catch (err) {\r\n                        console.error('Failed to run selective garbage collection:', err);\r\n                        alert('Failed to run selective garbage collection. Please try again later.');\r\n                      }\r\n                    }\r\n                  }}\r\n                >\r\n                  Selective GC\r\n                </button>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        <h3 style={{ marginTop: '30px' }}>My Images</h3>\r\n        \r\n        {loading && (\r\n          <div className=\"spinner\"></div>\r\n        )}\r\n        \r\n        {error && (\r\n          <div className=\"alert alert-danger\">{error}</div>\r\n        )}\r\n        \r\n        {!loading && myImages.length === 0 && (\r\n          <div className=\"card\">\r\n            <p>You haven't uploaded any images yet.</p>\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"image-grid\" style={{ marginBottom: '20px' }}>\r\n        {myImages.map((image) => (\r\n          <div key={image.id} className=\"image-card\">\r\n\r\n            <div style={{ position: 'relative' }}>\r\n              {imageLoadingStates[image.id] ? (\r\n                <div \r\n                  style={{ \r\n                    width: '100%', \r\n                    height: '200px',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    backgroundColor: '#f0f0f0',\r\n                    borderTopLeftRadius: '8px',\r\n                    borderTopRightRadius: '8px'\r\n                  }}\r\n                >\r\n                  <div className=\"spinner\" style={{ width: '40px', height: '40px' }}></div>\r\n                </div>\r\n              ) : (\r\n                <img \r\n                  id={`img-${image.id}`}\r\n                  src={getIpfsUrl(image.ipfs_hash, true)} // Always use force reload for initial load\r\n                  alt={`ID: ${image.id}`}\r\n                  style={{ \r\n                    width: '100%', \r\n                    height: '200px', \r\n                    objectFit: 'cover',\r\n                    borderTopLeftRadius: '8px',\r\n                    borderTopRightRadius: '8px'\r\n                  }}\r\n                  onError={(e) => {\r\n                    console.log(`Image ${image.id} failed to load, attempting to recover...`);\r\n                    \r\n                    // Set loading state\r\n                    setImageLoadingStates(prev => ({ ...prev, [image.id]: true }));\r\n                    \r\n                    // Use getBestIpfsUrl with more retries\r\n                    getBestIpfsUrl(image.ipfs_hash, 5).then(bestUrl => {\r\n                      console.log(`Got best URL for image ${image.id}: ${bestUrl}`);\r\n                      e.target.src = bestUrl;\r\n                      \r\n                      // If that fails, try to pin and get a new URL\r\n                      e.target.onerror = () => {\r\n                        console.log(`Best URL failed for image ${image.id}, trying to pin...`);\r\n                        getImageDownloadLink(image.id)\r\n                          .then(response => {\r\n                            if (response.isPinned) {\r\n                              console.log(`Image ${image.id} is now pinned, retrying load...`);\r\n                              // If now pinned, retry loading the image with force reload\r\n                              e.target.src = getIpfsUrl(image.ipfs_hash, true);\r\n                              e.target.onerror = null; // Remove this error handler\r\n                            } else {\r\n                              console.log(`Image ${image.id} is still not pinned, showing placeholder`);\r\n                              // If still not pinned, show placeholder\r\n                              e.target.onerror = null;\r\n                              e.target.src = 'https://via.placeholder.com/300x200?text=Image+Unavailable';\r\n                            }\r\n                            setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n                          })\r\n                          .catch((err) => {\r\n                            console.error(`Error getting download link for image ${image.id}:`, err);\r\n                            // On error, show placeholder\r\n                            e.target.onerror = null;\r\n                            e.target.src = 'https://via.placeholder.com/300x200?text=Image+Unavailable';\r\n                            setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n                          });\r\n                      };\r\n                    }).catch(err => {\r\n                      console.error(`Error getting best URL for image ${image.id}:`, err);\r\n                      setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n                    });\r\n                  }}\r\n                  onLoad={() => {\r\n                    console.log(`Image ${image.id} loaded successfully`);\r\n                    setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n                  }}\r\n                />\r\n              )}\r\n              {/* Add a refresh button to retry loading the image */}\r\n              <button \r\n                style={{\r\n                  position: 'absolute',\r\n                  top: '5px',\r\n                  right: '5px',\r\n                  background: 'rgba(255, 255, 255, 0.7)',\r\n                  border: 'none',\r\n                  borderRadius: '50%',\r\n                  width: '30px',\r\n                  height: '30px',\r\n                  cursor: 'pointer',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center'\r\n                }}\r\n                onClick={() => {\r\n                  // Set loading state\r\n                  setImageLoadingStates(prev => ({ ...prev, [image.id]: true }));\r\n                  \r\n                  // Get download link to ensure image is pinned\r\n                  getImageDownloadLink(image.id)\r\n                    .then(async (response) => {\r\n                      console.log(`Refresh requested for image ${image.id}, pin status:`, response.isPinned);\r\n                      \r\n                      // If not pinned, try to pin it\r\n                      if (!response.isPinned) {\r\n                        try {\r\n                          await pinImage(image.id);\r\n                          console.log(`Manually pinned image ${image.id}`);\r\n                        } catch (err) {\r\n                          console.error(`Error pinning image ${image.id}:`, err);\r\n                        }\r\n                      }\r\n                      \r\n                      // Force reload the image\r\n                      const imgElement = document.getElementById(`img-${image.id}`);\r\n                      if (imgElement) {\r\n                        // Use getBestIpfsUrl to get the most reliable URL\r\n                        const bestUrl = await getBestIpfsUrl(image.ipfs_hash, 5);\r\n                        imgElement.src = bestUrl;\r\n                      }\r\n                      \r\n                      setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n                    })\r\n                    .catch((err) => {\r\n                      console.error(`Error refreshing image ${image.id}:`, err);\r\n                      setImageLoadingStates(prev => ({ ...prev, [image.id]: false }));\r\n                    });\r\n                }}\r\n                title=\"Refresh image\"\r\n                disabled={imageLoadingStates[image.id]}\r\n              >\r\n                {imageLoadingStates[image.id] ? '⌛' : '↻'}\r\n              </button>\r\n            </div>\r\n              \r\n              <div className=\"image-info\">\r\n                <h3>Image #{image.id}</h3>\r\n                <p>Hash: {image.sha256_hash.substring(0, 10)}...</p>\r\n                <p>Uploaded: {new Date(image.uploaded_at).toLocaleString()}</p>\r\n                <p>Deepfake: {image.deepfake_label} ({Math.round(image.deepfake_confidence * 100)}%)</p>\r\n                \r\n                {/* Pin status indicator */}\r\n                <div style={{ \r\n                  display: 'flex', \r\n                  alignItems: 'center', \r\n                  marginBottom: '10px',\r\n                  color: image.is_pinned ? '#28a745' : '#dc3545'\r\n                }}>\r\n                  <span style={{ \r\n                    display: 'inline-block', \r\n                    width: '10px', \r\n                    height: '10px', \r\n                    borderRadius: '50%', \r\n                    backgroundColor: image.is_pinned ? '#28a745' : '#dc3545',\r\n                    marginRight: '5px'\r\n                  }}></span>\r\n                  <span>{image.is_pinned ? 'Pinned' : 'Not Pinned'}</span>\r\n                </div>\r\n                \r\n                <div className=\"image-actions\">\r\n                  <button \r\n                    className=\"btn\" \r\n                    onClick={() => handleDownload(image.id)}\r\n                  >\r\n                    Download\r\n                  </button>\r\n                  \r\n                  {/* Pin/Unpin button */}\r\n                  {image.is_pinned ? (\r\n                    <button \r\n                      className=\"btn\" \r\n                      style={{ marginLeft: '10px', backgroundColor: '#dc3545' }}\r\n                      onClick={async () => {\r\n                        try {\r\n                          await unpinImage(image.id);\r\n                          alert(`Image #${image.id} has been unpinned.`);\r\n                        } catch (err) {\r\n                          console.error('Failed to unpin image:', err);\r\n                          alert('Failed to unpin image. Please try again later.');\r\n                        }\r\n                      }}\r\n                    >\r\n                      Unpin\r\n                    </button>\r\n                  ) : (\r\n                    <button \r\n                      className=\"btn\" \r\n                      style={{ marginLeft: '10px', backgroundColor: '#28a745' }}\r\n                      onClick={async () => {\r\n                        try {\r\n                          await pinImage(image.id);\r\n                          alert(`Image #${image.id} has been pinned.`);\r\n                        } catch (err) {\r\n                          console.error('Failed to pin image:', err);\r\n                          alert('Failed to pin image. Please try again later.');\r\n                        }\r\n                      }}\r\n                    >\r\n                      Pin\r\n                    </button>\r\n                  )}\r\n        </div>\r\n        \r\n        {/* Pagination Controls */}\r\n        {!loading && myImages.length > 0 && (\r\n          <div className=\"pagination-controls\" style={{ \r\n            display: 'flex', \r\n            justifyContent: 'center', \r\n            alignItems: 'center', \r\n            margin: '20px 0 40px' \r\n          }}>\r\n            <button \r\n              className=\"btn\" \r\n              onClick={previousPage} \r\n              disabled={!pagination.hasPrevious}\r\n              style={{ \r\n                margin: '0 5px',\r\n                opacity: pagination.hasPrevious ? 1 : 0.5,\r\n                cursor: pagination.hasPrevious ? 'pointer' : 'not-allowed'\r\n              }}\r\n            >\r\n              &laquo; Previous\r\n            </button>\r\n            \r\n            <div style={{ margin: '0 15px' }}>\r\n              {/* Page numbers */}\r\n              {Array.from({ length: pagination.totalPages }, (_, i) => i + 1).map(page => (\r\n                <button\r\n                  key={page}\r\n                  onClick={() => goToPage(page)}\r\n                  style={{\r\n                    margin: '0 5px',\r\n                    padding: '5px 10px',\r\n                    border: page === pagination.currentPage ? '2px solid #007bff' : '1px solid #ccc',\r\n                    borderRadius: '4px',\r\n                    background: page === pagination.currentPage ? '#e6f2ff' : 'white',\r\n                    cursor: 'pointer'\r\n                  }}\r\n                >\r\n                  {page}\r\n                </button>\r\n              ))}\r\n            </div>\r\n            \r\n            <button \r\n              className=\"btn\" \r\n              onClick={nextPage} \r\n              disabled={!pagination.hasNext}\r\n              style={{ \r\n                margin: '0 5px',\r\n                opacity: pagination.hasNext ? 1 : 0.5,\r\n                cursor: pagination.hasNext ? 'pointer' : 'not-allowed'\r\n              }}\r\n            >\r\n              Next &raquo;\r\n            </button>\r\n          </div>\r\n        )}\r\n        \r\n        {/* Pagination Info */}\r\n        {!loading && myImages.length > 0 && (\r\n          <div style={{ textAlign: 'center', marginBottom: '30px', color: '#666' }}>\r\n            Showing page {pagination.currentPage} of {pagination.totalPages} ({pagination.totalImages} total images)\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}