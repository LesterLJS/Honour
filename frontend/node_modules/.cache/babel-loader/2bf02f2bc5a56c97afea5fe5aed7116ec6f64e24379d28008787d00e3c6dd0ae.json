{"ast":null,"code":"import api from './index';\n\n/**\r\n * Login with username and password\r\n * @param {string} username - User's username\r\n * @param {string} password - User's password\r\n * @returns {Promise} - API response with tokens and user data\r\n */\nexport const login = (username, password) => {\n  return api.post('/api/auth/login/', {\n    username,\n    password\n  });\n};\n\n/**\r\n * Register a new user\r\n * @param {Object} userData - User registration data\r\n * @param {string} userData.username - Username\r\n * @param {string} userData.password - Password\r\n * @param {string} userData.email - Email (optional)\r\n * @returns {Promise} - API response with the created user\r\n */\nexport const register = userData => {\n  return api.post('/api/auth/register/', userData);\n};\n\n/**\r\n * Store authentication tokens in localStorage\r\n * @param {Object} tokens - Authentication tokens\r\n * @param {string} tokens.access - Access token\r\n * @param {string} tokens.refresh - Refresh token\r\n */\nexport const setAuthTokens = tokens => {\n  localStorage.setItem('access_token', tokens.access);\n  localStorage.setItem('refresh_token', tokens.refresh);\n};\n\n/**\r\n * Remove authentication tokens from localStorage\r\n */\nexport const clearAuthTokens = () => {\n  localStorage.removeItem('access_token');\n  localStorage.removeItem('refresh_token');\n};\n\n/**\r\n * Check if user is authenticated\r\n * @returns {boolean} - True if user has an access token\r\n */\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('access_token');\n};\n\n/**\r\n * Refresh the access token using the refresh token\r\n * @returns {Promise} - API response with new access token\r\n */\nexport const refreshAccessToken = async () => {\n  const refreshToken = localStorage.getItem('refresh_token');\n  if (!refreshToken) {\n    throw new Error('No refresh token found');\n  }\n  const response = await api.post('/api/auth/refresh/', {\n    refresh: refreshToken\n  });\n  setAuthTokens(response.data); // Store new tokens\n  return response.data.access; // Return new access token\n};","map":{"version":3,"names":["api","login","username","password","post","register","userData","setAuthTokens","tokens","localStorage","setItem","access","refresh","clearAuthTokens","removeItem","isAuthenticated","getItem","refreshAccessToken","refreshToken","Error","response","data"],"sources":["F:/MyProject/frontend/src/api/auth.js"],"sourcesContent":["import api from './index';\r\n\r\n/**\r\n * Login with username and password\r\n * @param {string} username - User's username\r\n * @param {string} password - User's password\r\n * @returns {Promise} - API response with tokens and user data\r\n */\r\nexport const login = (username, password) => {\r\n  return api.post('/api/auth/login/', { username, password });\r\n};\r\n\r\n/**\r\n * Register a new user\r\n * @param {Object} userData - User registration data\r\n * @param {string} userData.username - Username\r\n * @param {string} userData.password - Password\r\n * @param {string} userData.email - Email (optional)\r\n * @returns {Promise} - API response with the created user\r\n */\r\nexport const register = (userData) => {\r\n  return api.post('/api/auth/register/', userData);\r\n};\r\n\r\n/**\r\n * Store authentication tokens in localStorage\r\n * @param {Object} tokens - Authentication tokens\r\n * @param {string} tokens.access - Access token\r\n * @param {string} tokens.refresh - Refresh token\r\n */\r\nexport const setAuthTokens = (tokens) => {\r\n  localStorage.setItem('access_token', tokens.access);\r\n  localStorage.setItem('refresh_token', tokens.refresh);\r\n};\r\n\r\n/**\r\n * Remove authentication tokens from localStorage\r\n */\r\nexport const clearAuthTokens = () => {\r\n  localStorage.removeItem('access_token');\r\n  localStorage.removeItem('refresh_token');\r\n};\r\n\r\n/**\r\n * Check if user is authenticated\r\n * @returns {boolean} - True if user has an access token\r\n */\r\nexport const isAuthenticated = () => {\r\n  return !!localStorage.getItem('access_token');\r\n};\r\n\r\n/**\r\n * Refresh the access token using the refresh token\r\n * @returns {Promise} - API response with new access token\r\n */\r\nexport const refreshAccessToken = async () => {\r\n  const refreshToken = localStorage.getItem('refresh_token');\r\n  if (!refreshToken) {\r\n    throw new Error('No refresh token found');\r\n  }\r\n  const response = await api.post('/api/auth/refresh/', { refresh: refreshToken });\r\n  setAuthTokens(response.data); // Store new tokens\r\n  return response.data.access; // Return new access token\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,SAAS;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EAC3C,OAAOH,GAAG,CAACI,IAAI,CAAC,kBAAkB,EAAE;IAAEF,QAAQ;IAAEC;EAAS,CAAC,CAAC;AAC7D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,QAAQ,GAAIC,QAAQ,IAAK;EACpC,OAAON,GAAG,CAACI,IAAI,CAAC,qBAAqB,EAAEE,QAAQ,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAIC,MAAM,IAAK;EACvCC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEF,MAAM,CAACG,MAAM,CAAC;EACnDF,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEF,MAAM,CAACI,OAAO,CAAC;AACvD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnCJ,YAAY,CAACK,UAAU,CAAC,cAAc,CAAC;EACvCL,YAAY,CAACK,UAAU,CAAC,eAAe,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAO,CAAC,CAACN,YAAY,CAACO,OAAO,CAAC,cAAc,CAAC;AAC/C,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,MAAMC,YAAY,GAAGT,YAAY,CAACO,OAAO,CAAC,eAAe,CAAC;EAC1D,IAAI,CAACE,YAAY,EAAE;IACjB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,MAAMC,QAAQ,GAAG,MAAMpB,GAAG,CAACI,IAAI,CAAC,oBAAoB,EAAE;IAAEQ,OAAO,EAAEM;EAAa,CAAC,CAAC;EAChFX,aAAa,CAACa,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;EAC9B,OAAOD,QAAQ,CAACC,IAAI,CAACV,MAAM,CAAC,CAAC;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}