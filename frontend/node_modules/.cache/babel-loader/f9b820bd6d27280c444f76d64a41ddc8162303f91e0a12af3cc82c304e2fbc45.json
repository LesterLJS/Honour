{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Erwachens\\\\Desktop\\\\MyProject\\\\frontend\\\\src\\\\context\\\\ImageContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { uploadImage as apiUploadImage, getMyImages as apiGetMyImages, getImageDownloadLink as apiGetImageDownloadLink, searchSimilarImages as apiSearchSimilarImages, getAllImages as apiGetAllImages, deleteImage as apiDeleteImage, batchUploadImages as apiBatchUploadImages } from '../api/images';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageContext = /*#__PURE__*/createContext(null);\n\n// Custom hook to use the image context\nexport const useImages = () => {\n  _s();\n  return useContext(ImageContext);\n};\n_s(useImages, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ImageProvider = ({\n  children\n}) => {\n  _s2();\n  const [myImages, setMyImages] = useState([]);\n  const [allImages, setAllImages] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Upload an image\n  const uploadImage = async imageFile => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiUploadImage(imageFile);\n      // Add the new image to the myImages array\n      setMyImages(prevImages => [response.data, ...prevImages]);\n      return response.data;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'Image upload failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get user's images\n  const getMyImages = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiGetMyImages();\n      setMyImages(response.data);\n      return response.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || 'Failed to fetch images');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get IPFS download link\n  const getImageDownloadLink = async imageId => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiGetImageDownloadLink(imageId);\n\n      // Return the full response with all URLs and blockchain data\n      return response;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.error) || 'Failed to get download link');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Search for similar images\n  const searchSimilarImages = async imageFile => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiSearchSimilarImages(imageFile);\n      setSearchResults(response.data);\n      return response.data;\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      setError(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.error) || 'Image search failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Admin: Get all images\n  const getAllImages = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiGetAllImages();\n      setAllImages(response.data);\n      return response.data;\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      setError(((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.error) || 'Failed to fetch all images');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Admin: Delete an image\n  const deleteImage = async imageId => {\n    setLoading(true);\n    setError(null);\n    try {\n      await apiDeleteImage(imageId);\n      // Remove the deleted image from state\n      setAllImages(prevImages => prevImages.filter(img => img.id !== imageId));\n      setMyImages(prevImages => prevImages.filter(img => img.id !== imageId));\n      return true;\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      setError(((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.error) || 'Failed to delete image');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Context value\n  const value = {\n    myImages,\n    allImages,\n    searchResults,\n    loading,\n    error,\n    uploadImage,\n    batchUploadImages,\n    getMyImages,\n    getImageDownloadLink,\n    searchSimilarImages,\n    getAllImages,\n    deleteImage\n  };\n  return /*#__PURE__*/_jsxDEV(ImageContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 10\n  }, this);\n};\n_s2(ImageProvider, \"0h1Zpx9f6uDMe9mHThYQHnTN7sc=\");\n_c = ImageProvider;\nexport default ImageContext;\nvar _c;\n$RefreshReg$(_c, \"ImageProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","uploadImage","apiUploadImage","getMyImages","apiGetMyImages","getImageDownloadLink","apiGetImageDownloadLink","searchSimilarImages","apiSearchSimilarImages","getAllImages","apiGetAllImages","deleteImage","apiDeleteImage","batchUploadImages","apiBatchUploadImages","jsxDEV","_jsxDEV","ImageContext","useImages","_s","ImageProvider","children","_s2","myImages","setMyImages","allImages","setAllImages","searchResults","setSearchResults","loading","setLoading","error","setError","imageFile","response","prevImages","data","err","_err$response","_err$response$data","_err$response2","_err$response2$data","imageId","_err$response3","_err$response3$data","_err$response4","_err$response4$data","_err$response5","_err$response5$data","filter","img","id","_err$response6","_err$response6$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/context/ImageContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\nimport { \r\n  uploadImage as apiUploadImage,\r\n  getMyImages as apiGetMyImages,\r\n  getImageDownloadLink as apiGetImageDownloadLink,\r\n  searchSimilarImages as apiSearchSimilarImages,\r\n  getAllImages as apiGetAllImages,\r\n  deleteImage as apiDeleteImage,\r\n  batchUploadImages as apiBatchUploadImages\r\n} from '../api/images';\r\n\r\n// Create the context\r\nconst ImageContext = createContext(null);\r\n\r\n// Custom hook to use the image context\r\nexport const useImages = () => useContext(ImageContext);\r\n\r\nexport const ImageProvider = ({ children }) => {\r\n  const [myImages, setMyImages] = useState([]);\r\n  const [allImages, setAllImages] = useState([]);\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Upload an image\r\n  const uploadImage = async (imageFile) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await apiUploadImage(imageFile);\r\n      // Add the new image to the myImages array\r\n      setMyImages(prevImages => [response.data, ...prevImages]);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.response?.data?.error || 'Image upload failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get user's images\r\n  const getMyImages = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await apiGetMyImages();\r\n      setMyImages(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.response?.data?.error || 'Failed to fetch images');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n // Get IPFS download link\r\nconst getImageDownloadLink = async (imageId) => {\r\n  setLoading(true);\r\n  setError(null);\r\n  try {\r\n    const response = await apiGetImageDownloadLink(imageId);\r\n    \r\n    // Return the full response with all URLs and blockchain data\r\n    return response;\r\n  } catch (err) {\r\n    setError(err.response?.data?.error || 'Failed to get download link');\r\n    throw err;\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n  // Search for similar images\r\n  const searchSimilarImages = async (imageFile) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await apiSearchSimilarImages(imageFile);\r\n      setSearchResults(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.response?.data?.error || 'Image search failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Admin: Get all images\r\n  const getAllImages = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await apiGetAllImages();\r\n      setAllImages(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.response?.data?.error || 'Failed to fetch all images');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Admin: Delete an image\r\n  const deleteImage = async (imageId) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      await apiDeleteImage(imageId);\r\n      // Remove the deleted image from state\r\n      setAllImages(prevImages => prevImages.filter(img => img.id !== imageId));\r\n      setMyImages(prevImages => prevImages.filter(img => img.id !== imageId));\r\n      return true;\r\n    } catch (err) {\r\n      setError(err.response?.data?.error || 'Failed to delete image');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    myImages,\r\n    allImages,\r\n    searchResults,\r\n    loading,\r\n    error,\r\n    uploadImage,\r\n    batchUploadImages,\r\n    getMyImages,\r\n    getImageDownloadLink,\r\n    searchSimilarImages,\r\n    getAllImages,\r\n    deleteImage,\r\n  };\r\n\r\n  return <ImageContext.Provider value={value}>{children}</ImageContext.Provider>;\r\n};\r\n\r\nexport default ImageContext;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}