{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Erwachens\\\\Desktop\\\\MyProject\\\\frontend\\\\src\\\\context\\\\AnalyticsContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { getImageAnalytics, getDeepfakeDistribution, getUploadTimeline, getUserActivity, getVerificationStats, getPinStats } from '../api/analytics';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnalyticsContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the analytics context\nexport const useAnalytics = () => {\n  _s();\n  return useContext(AnalyticsContext);\n};\n\n// Provider component\n_s(useAnalytics, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AnalyticsProvider = ({\n  children\n}) => {\n  _s2();\n  // State for analytics data\n  const [summary, setSummary] = useState(null);\n  const [deepfakeDistribution, setDeepfakeDistribution] = useState(null);\n  const [uploadTimeline, setUploadTimeline] = useState(null);\n  const [userActivity, setUserActivity] = useState(null);\n  const [verificationStats, setVerificationStats] = useState(null);\n  const [pinStats, setPinStats] = useState(null);\n\n  // Loading and error states\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch summary analytics\n  const fetchSummary = async (filters = {}) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await getImageAnalytics(filters);\n      setSummary(data);\n    } catch (err) {\n      setError('Failed to fetch analytics summary: ' + (err.message || 'Unknown error'));\n      console.error('Error fetching analytics summary:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch deepfake distribution\n  const fetchDeepfakeDistribution = async (filters = {}) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await getDeepfakeDistribution(filters);\n      setDeepfakeDistribution(data);\n    } catch (err) {\n      setError('Failed to fetch deepfake distribution: ' + (err.message || 'Unknown error'));\n      console.error('Error fetching deepfake distribution:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch upload timeline\n  const fetchUploadTimeline = async (grouping = 'day') => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await getUploadTimeline(grouping);\n      setUploadTimeline(data);\n    } catch (err) {\n      setError('Failed to fetch upload timeline: ' + (err.message || 'Unknown error'));\n      console.error('Error fetching upload timeline:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch user activity (admin only)\n  const fetchUserActivity = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await getUserActivity();\n      setUserActivity(data);\n    } catch (err) {\n      setError('Failed to fetch user activity: ' + (err.message || 'Unknown error'));\n      console.error('Error fetching user activity:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch verification stats\n  const fetchVerificationStats = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await getVerificationStats();\n      setVerificationStats(data);\n    } catch (err) {\n      setError('Failed to fetch verification stats: ' + (err.message || 'Unknown error'));\n      console.error('Error fetching verification stats:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch IPFS pin statistics (admin only)\n  const fetchPinStats = async (filters = {}) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await getPinStats(filters);\n      setPinStats(data);\n    } catch (err) {\n      setError('Failed to fetch IPFS pin statistics: ' + (err.message || 'Unknown error'));\n      console.error('Error fetching IPFS pin statistics:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Clear all analytics data\n  const clearAnalytics = () => {\n    setSummary(null);\n    setDeepfakeDistribution(null);\n    setUploadTimeline(null);\n    setUserActivity(null);\n    setVerificationStats(null);\n    setError(null);\n  };\n\n  // Context value\n  const value = {\n    // Data\n    summary,\n    deepfakeDistribution,\n    uploadTimeline,\n    userActivity,\n    verificationStats,\n    // Status\n    loading,\n    error,\n    // Actions\n    fetchSummary,\n    fetchDeepfakeDistribution,\n    fetchUploadTimeline,\n    fetchUserActivity,\n    fetchVerificationStats,\n    clearAnalytics\n  };\n  return /*#__PURE__*/_jsxDEV(AnalyticsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s2(AnalyticsProvider, \"Nt5tx9ukWz4bbz+I3Iw/IaZEbCU=\");\n_c = AnalyticsProvider;\nvar _c;\n$RefreshReg$(_c, \"AnalyticsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","getImageAnalytics","getDeepfakeDistribution","getUploadTimeline","getUserActivity","getVerificationStats","getPinStats","jsxDEV","_jsxDEV","AnalyticsContext","useAnalytics","_s","AnalyticsProvider","children","_s2","summary","setSummary","deepfakeDistribution","setDeepfakeDistribution","uploadTimeline","setUploadTimeline","userActivity","setUserActivity","verificationStats","setVerificationStats","pinStats","setPinStats","loading","setLoading","error","setError","fetchSummary","filters","data","err","message","console","fetchDeepfakeDistribution","fetchUploadTimeline","grouping","fetchUserActivity","fetchVerificationStats","fetchPinStats","clearAnalytics","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/context/AnalyticsContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport { getImageAnalytics, getDeepfakeDistribution, getUploadTimeline, getUserActivity, getVerificationStats, getPinStats } from '../api/analytics';\r\n\r\n// Create the context\r\nconst AnalyticsContext = createContext();\r\n\r\n// Custom hook to use the analytics context\r\nexport const useAnalytics = () => useContext(AnalyticsContext);\r\n\r\n// Provider component\r\nexport const AnalyticsProvider = ({ children }) => {\r\n  // State for analytics data\r\n  const [summary, setSummary] = useState(null);\r\n  const [deepfakeDistribution, setDeepfakeDistribution] = useState(null);\r\n  const [uploadTimeline, setUploadTimeline] = useState(null);\r\n  const [userActivity, setUserActivity] = useState(null);\r\n  const [verificationStats, setVerificationStats] = useState(null);\r\n  const [pinStats, setPinStats] = useState(null);\r\n  \r\n  // Loading and error states\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch summary analytics\r\n  const fetchSummary = async (filters = {}) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const data = await getImageAnalytics(filters);\r\n      setSummary(data);\r\n    } catch (err) {\r\n      setError('Failed to fetch analytics summary: ' + (err.message || 'Unknown error'));\r\n      console.error('Error fetching analytics summary:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch deepfake distribution\r\n  const fetchDeepfakeDistribution = async (filters = {}) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const data = await getDeepfakeDistribution(filters);\r\n      setDeepfakeDistribution(data);\r\n    } catch (err) {\r\n      setError('Failed to fetch deepfake distribution: ' + (err.message || 'Unknown error'));\r\n      console.error('Error fetching deepfake distribution:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch upload timeline\r\n  const fetchUploadTimeline = async (grouping = 'day') => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const data = await getUploadTimeline(grouping);\r\n      setUploadTimeline(data);\r\n    } catch (err) {\r\n      setError('Failed to fetch upload timeline: ' + (err.message || 'Unknown error'));\r\n      console.error('Error fetching upload timeline:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch user activity (admin only)\r\n  const fetchUserActivity = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const data = await getUserActivity();\r\n      setUserActivity(data);\r\n    } catch (err) {\r\n      setError('Failed to fetch user activity: ' + (err.message || 'Unknown error'));\r\n      console.error('Error fetching user activity:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch verification stats\r\n  const fetchVerificationStats = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const data = await getVerificationStats();\r\n      setVerificationStats(data);\r\n    } catch (err) {\r\n      setError('Failed to fetch verification stats: ' + (err.message || 'Unknown error'));\r\n      console.error('Error fetching verification stats:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch IPFS pin statistics (admin only)\r\n  const fetchPinStats = async (filters = {}) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const data = await getPinStats(filters);\r\n      setPinStats(data);\r\n    } catch (err) {\r\n      setError('Failed to fetch IPFS pin statistics: ' + (err.message || 'Unknown error'));\r\n      console.error('Error fetching IPFS pin statistics:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Clear all analytics data\r\n  const clearAnalytics = () => {\r\n    setSummary(null);\r\n    setDeepfakeDistribution(null);\r\n    setUploadTimeline(null);\r\n    setUserActivity(null);\r\n    setVerificationStats(null);\r\n    setError(null);\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    // Data\r\n    summary,\r\n    deepfakeDistribution,\r\n    uploadTimeline,\r\n    userActivity,\r\n    verificationStats,\r\n    \r\n    // Status\r\n    loading,\r\n    error,\r\n    \r\n    // Actions\r\n    fetchSummary,\r\n    fetchDeepfakeDistribution,\r\n    fetchUploadTimeline,\r\n    fetchUserActivity,\r\n    fetchVerificationStats,\r\n    clearAnalytics\r\n  };\r\n\r\n  return (\r\n    <AnalyticsContext.Provider value={value}>\r\n      {children}\r\n    </AnalyticsContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}