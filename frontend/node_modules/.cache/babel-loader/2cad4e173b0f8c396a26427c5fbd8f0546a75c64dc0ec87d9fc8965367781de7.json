{"ast":null,"code":"var _jsxFileName = \"F:\\\\MyProject\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { login as apiLogin, register as apiRegister, setAuthTokens, clearAuthTokens, isAuthenticated } from '../api/auth';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    const checkAuth = () => {\n      if (isAuthenticated()) {\n        // Get user data from localStorage if available\n        const userData = localStorage.getItem('user_data');\n        if (userData) {\n          setUser(JSON.parse(userData));\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n\n  // Login function\n  const login = async (username, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiLogin(username, password);\n      const {\n        refresh,\n        access,\n        user: userData\n      } = response.data;\n\n      // Store tokens and user data\n      setAuthTokens({\n        refresh,\n        access\n      });\n      localStorage.setItem('user_data', JSON.stringify(userData));\n      setUser(userData);\n      return userData;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'Login failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiRegister(userData);\n      return response.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || 'Registration failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    clearAuthTokens();\n    localStorage.removeItem('user_data');\n    setUser(null);\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return (user === null || user === void 0 ? void 0 : user.role) === 'admin';\n  };\n\n  // Context value\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","login","apiLogin","register","apiRegister","setAuthTokens","clearAuthTokens","isAuthenticated","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","checkAuth","userData","localStorage","getItem","JSON","parse","username","password","response","refresh","access","data","setItem","stringify","err","_err$response","_err$response$data","_err$response2","_err$response2$data","logout","removeItem","isAdmin","role","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/MyProject/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { login as apiLogin, register as apiRegister, setAuthTokens, clearAuthTokens, isAuthenticated } from '../api/auth';\r\n\r\n// Create the context\r\nconst AuthContext = createContext(null);\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check if user is already logged in on mount\r\n  useEffect(() => {\r\n    const checkAuth = () => {\r\n      if (isAuthenticated()) {\r\n        // Get user data from localStorage if available\r\n        const userData = localStorage.getItem('user_data');\r\n        if (userData) {\r\n          setUser(JSON.parse(userData));\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (username, password) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await apiLogin(username, password);\r\n      const { refresh, access, user: userData } = response.data;\r\n      \r\n      // Store tokens and user data\r\n      setAuthTokens({ refresh, access });\r\n      localStorage.setItem('user_data', JSON.stringify(userData));\r\n      setUser(userData);\r\n      \r\n      return userData;\r\n    } catch (err) {\r\n      setError(err.response?.data?.error || 'Login failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await apiRegister(userData);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.response?.data?.error || 'Registration failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    clearAuthTokens();\r\n    localStorage.removeItem('user_data');\r\n    setUser(null);\r\n  };\r\n\r\n  // Check if user is admin\r\n  const isAdmin = () => {\r\n    return user?.role === 'admin';\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    register,\r\n    logout,\r\n    isAuthenticated: !!user,\r\n    isAdmin,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}