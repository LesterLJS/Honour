{"ast":null,"code":"import api from '../api/index'; // Importing the api instance\n\nexport const loadImageWithAuth = async imageId => {\n  try {\n    // 使用配置好的axios实例发送请求\n    const response = await api.get(`/api/images/${imageId}/file/`, {\n      responseType: 'blob' // 告诉axios我们期望二进制数据\n    });\n\n    // 创建Blob URL\n    const blob = new Blob([response.data], {\n      type: response.headers['content-type']\n    });\n    return URL.createObjectURL(blob);\n  } catch (error) {\n    console.error(`Error loading image ${imageId}:`, error);\n    return ''; // 失败时返回空字符串\n  }\n};\nimport { jwtDecode } from 'jwt-decode'; // Importing jwtDecode for decoding tokens\nimport { refreshAccessToken } from './auth'; // Importing refreshAccessToken function\n\nexport const getMyImages = () => {\n  return api.get('/api/images/my-images/'); // Adjust the endpoint as necessary\n};\nexport const getImageUrl = imageId => {\n  // Return URL without the token as a query parameter\n  return `${api.defaults.baseURL}/api/images/${imageId}/file/`;\n};\nexport const loadImage = async imageId => {\n  try {\n    // Get the token\n    const token = localStorage.getItem('access_token');\n    if (!token) {\n      throw new Error('No access token found');\n    }\n\n    // Fetch the image with the Authorization header\n    const response = await fetch(`${api.defaults.baseURL}/api/images/${imageId}/file/`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to load image: ${response.status}`);\n    }\n\n    // Create Blob URL\n    const blob = await response.blob();\n    return URL.createObjectURL(blob);\n  } catch (error) {\n    console.error(`Error loading image ${imageId}:`, error);\n    return ''; // Return empty string on failure\n  }\n};\n\n/**\r\n * Upload an image to the server\r\n * @param {File} imageFile - The image file to upload\r\n * @returns {Promise} - API response with the uploaded image data\r\n */\nexport const uploadImage = imageFile => {\n  const formData = new FormData();\n  formData.append('file', imageFile);\n  return api.post('/api/images/upload/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n/**\r\n * Admin: Get recently verified images\r\n * @returns {Promise} - API response with recently verified images\r\n */\nexport const getVerifiedImages = () => {\n  return api.get('/api/images/admin/images/verified/');\n};\n\n/**\r\n * Admin: Get all images from all users\r\n * @returns {Promise} - API response with all images\r\n */\nexport const getAllImages = () => {\n  return api.get('/api/images/admin/images/');\n};\n\n/**\r\n * Admin: Delete an image\r\n * @param {number} imageId - The ID of the image to delete\r\n * @returns {Promise} - API response confirming deletion\r\n */\nexport const deleteImage = imageId => {\n  return api.delete(`/api/images/admin/images/${imageId}/`);\n};","map":{"version":3,"names":["api","loadImageWithAuth","imageId","response","get","responseType","blob","Blob","data","type","headers","URL","createObjectURL","error","console","jwtDecode","refreshAccessToken","getMyImages","getImageUrl","defaults","baseURL","loadImage","token","localStorage","getItem","Error","fetch","ok","status","uploadImage","imageFile","formData","FormData","append","post","getVerifiedImages","getAllImages","deleteImage","delete"],"sources":["F:/MyProject/frontend/src/api/images.js"],"sourcesContent":["import api from '../api/index'; // Importing the api instance\r\n\r\nexport const loadImageWithAuth = async (imageId) => {\r\n  try {\r\n    // 使用配置好的axios实例发送请求\r\n    const response = await api.get(`/api/images/${imageId}/file/`, {\r\n      responseType: 'blob' // 告诉axios我们期望二进制数据\r\n    });\r\n    \r\n    // 创建Blob URL\r\n    const blob = new Blob([response.data], { \r\n      type: response.headers['content-type'] \r\n    });\r\n    return URL.createObjectURL(blob);\r\n  } catch (error) {\r\n    console.error(`Error loading image ${imageId}:`, error);\r\n    return ''; // 失败时返回空字符串\r\n  }\r\n};\r\n\r\nimport { jwtDecode } from 'jwt-decode'; // Importing jwtDecode for decoding tokens\r\nimport { refreshAccessToken } from './auth'; // Importing refreshAccessToken function\r\n\r\nexport const getMyImages = () => {\r\n  return api.get('/api/images/my-images/'); // Adjust the endpoint as necessary\r\n};\r\n\r\nexport const getImageUrl = (imageId) => {\r\n  // Return URL without the token as a query parameter\r\n  return `${api.defaults.baseURL}/api/images/${imageId}/file/`; \r\n};\r\n\r\nexport const loadImage = async (imageId) => {\r\n  try {\r\n    // Get the token\r\n    const token = localStorage.getItem('access_token');\r\n    if (!token) {\r\n      throw new Error('No access token found');\r\n    }\r\n\r\n    // Fetch the image with the Authorization header\r\n    const response = await fetch(`${api.defaults.baseURL}/api/images/${imageId}/file/`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load image: ${response.status}`);\r\n    }\r\n\r\n    // Create Blob URL\r\n    const blob = await response.blob();\r\n    return URL.createObjectURL(blob);\r\n  } catch (error) {\r\n    console.error(`Error loading image ${imageId}:`, error);\r\n    return ''; // Return empty string on failure\r\n  }\r\n};\r\n\r\n/**\r\n * Upload an image to the server\r\n * @param {File} imageFile - The image file to upload\r\n * @returns {Promise} - API response with the uploaded image data\r\n */\r\nexport const uploadImage = (imageFile) => {\r\n  const formData = new FormData();\r\n  formData.append('file', imageFile);\r\n  return api.post('/api/images/upload/', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};\r\n\r\n/**\r\n * Admin: Get recently verified images\r\n * @returns {Promise} - API response with recently verified images\r\n */\r\nexport const getVerifiedImages = () => {\r\n  return api.get('/api/images/admin/images/verified/');\r\n};\r\n\r\n/**\r\n * Admin: Get all images from all users\r\n * @returns {Promise} - API response with all images\r\n */\r\nexport const getAllImages = () => {\r\n  return api.get('/api/images/admin/images/');\r\n};\r\n\r\n/**\r\n * Admin: Delete an image\r\n * @param {number} imageId - The ID of the image to delete\r\n * @returns {Promise} - API response confirming deletion\r\n */\r\nexport const deleteImage = (imageId) => {\r\n  return api.delete(`/api/images/admin/images/${imageId}/`);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}