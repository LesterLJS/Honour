{"ast":null,"code":"import api from './index';\n\n/**\r\n * Upload an image to the server\r\n * @param {File} imageFile - The image file to upload\r\n * @returns {Promise} - API response with the uploaded image data\r\n */\nexport const uploadImage = imageFile => {\n  const formData = new FormData();\n  formData.append('file', imageFile);\n  return api.post('/api/images/upload/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n/**\r\n * Pin all images uploaded by the current user to the local IPFS node\r\n * @returns {Promise} - API response with the pin operation results\r\n */\nexport const pinAllImages = () => {\n  return api.post('/api/images/pin-all/');\n};\n\n/**\r\n * Run IPFS garbage collection to free up space (admin only)\r\n * @returns {Promise} - API response with the garbage collection results\r\n */\nexport const runGarbageCollection = () => {\n  return api.post('/api/images/run-gc/');\n};\n\n/**\r\n * Get all images uploaded by the current user\r\n * @returns {Promise} - API response with the user's images\r\n */\nexport const getMyImages = () => {\n  return api.get('/api/images/my/');\n};\n\n/**\r\n * Get IPFS download link for an image\r\n * @param {number} imageId - The ID of the image\r\n * @returns {Promise} - API response with the IPFS URLs and blockchain data\r\n */\nexport const getImageDownloadLink = async imageId => {\n  try {\n    const response = await api.get(`/api/images/download/${imageId}/`);\n\n    // Return the full response data to allow access to all URLs\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to get download link:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Search for similar images\r\n * @param {File} imageFile - The image file to use as a query\r\n * @returns {Promise} - API response with similar images\r\n */\nexport const searchSimilarImages = imageFile => {\n  const formData = new FormData();\n  formData.append('file', imageFile);\n  return api.post('/api/images/search-similar/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n/**\r\n * Admin: Get all images from all users\r\n * @returns {Promise} - API response with all images\r\n */\nexport const getAllImages = () => {\n  return api.get('/api/images/admin/images/');\n};\n\n/**\r\n * Admin: Delete an image\r\n * @param {number} imageId - The ID of the image to delete\r\n * @returns {Promise} - API response confirming deletion\r\n */\nexport const deleteImage = imageId => {\n  return api.delete(`/api/images/admin/images/${imageId}/`);\n};\n\n/**\r\n * Upload multiple images to the server in a batch\r\n * @param {File[]} imageFiles - Array of image files to upload\r\n * @returns {Promise} - API response with the uploaded images data\r\n */\nexport const batchUploadImages = imageFiles => {\n  const formData = new FormData();\n\n  // Append each file to the formData with the key 'files'\n  imageFiles.forEach(file => {\n    formData.append('files', file);\n  });\n  return api.post('/api/images/batch-upload/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};","map":{"version":3,"names":["api","uploadImage","imageFile","formData","FormData","append","post","headers","pinAllImages","runGarbageCollection","getMyImages","get","getImageDownloadLink","imageId","response","data","error","console","searchSimilarImages","getAllImages","deleteImage","delete","batchUploadImages","imageFiles","forEach","file"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/api/images.js"],"sourcesContent":["import api from './index';\r\n\r\n/**\r\n * Upload an image to the server\r\n * @param {File} imageFile - The image file to upload\r\n * @returns {Promise} - API response with the uploaded image data\r\n */\r\nexport const uploadImage = (imageFile) => {\r\n  const formData = new FormData();\r\n  formData.append('file', imageFile);\r\n  return api.post('/api/images/upload/', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};\r\n\r\n/**\r\n * Pin all images uploaded by the current user to the local IPFS node\r\n * @returns {Promise} - API response with the pin operation results\r\n */\r\nexport const pinAllImages = () => {\r\n  return api.post('/api/images/pin-all/');\r\n};\r\n\r\n/**\r\n * Run IPFS garbage collection to free up space (admin only)\r\n * @returns {Promise} - API response with the garbage collection results\r\n */\r\nexport const runGarbageCollection = () => {\r\n  return api.post('/api/images/run-gc/');\r\n};\r\n\r\n/**\r\n * Get all images uploaded by the current user\r\n * @returns {Promise} - API response with the user's images\r\n */\r\nexport const getMyImages = () => {\r\n  return api.get('/api/images/my/');\r\n};\r\n\r\n/**\r\n * Get IPFS download link for an image\r\n * @param {number} imageId - The ID of the image\r\n * @returns {Promise} - API response with the IPFS URLs and blockchain data\r\n */\r\nexport const getImageDownloadLink = async (imageId) => {\r\n  try {\r\n    const response = await api.get(`/api/images/download/${imageId}/`);\r\n    \r\n    // Return the full response data to allow access to all URLs\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Failed to get download link:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Search for similar images\r\n * @param {File} imageFile - The image file to use as a query\r\n * @returns {Promise} - API response with similar images\r\n */\r\nexport const searchSimilarImages = (imageFile) => {\r\n  const formData = new FormData();\r\n  formData.append('file', imageFile);\r\n  return api.post('/api/images/search-similar/', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};\r\n\r\n/**\r\n * Admin: Get all images from all users\r\n * @returns {Promise} - API response with all images\r\n */\r\nexport const getAllImages = () => {\r\n  return api.get('/api/images/admin/images/');\r\n};\r\n\r\n/**\r\n * Admin: Delete an image\r\n * @param {number} imageId - The ID of the image to delete\r\n * @returns {Promise} - API response confirming deletion\r\n */\r\nexport const deleteImage = (imageId) => {\r\n  return api.delete(`/api/images/admin/images/${imageId}/`);\r\n};\r\n\r\n\r\n/**\r\n * Upload multiple images to the server in a batch\r\n * @param {File[]} imageFiles - Array of image files to upload\r\n * @returns {Promise} - API response with the uploaded images data\r\n */\r\nexport const batchUploadImages = (imageFiles) => {\r\n  const formData = new FormData();\r\n  \r\n  // Append each file to the formData with the key 'files'\r\n  imageFiles.forEach(file => {\r\n    formData.append('files', file);\r\n  });\r\n  \r\n  return api.post('/api/images/batch-upload/', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,SAAS;;AAEzB;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,SAAS,IAAK;EACxC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,SAAS,CAAC;EAClC,OAAOF,GAAG,CAACM,IAAI,CAAC,qBAAqB,EAAEH,QAAQ,EAAE;IAC/CI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAChC,OAAOR,GAAG,CAACM,IAAI,CAAC,sBAAsB,CAAC;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMG,oBAAoB,GAAGA,CAAA,KAAM;EACxC,OAAOT,GAAG,CAACM,IAAI,CAAC,qBAAqB,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMI,WAAW,GAAGA,CAAA,KAAM;EAC/B,OAAOV,GAAG,CAACW,GAAG,CAAC,iBAAiB,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,OAAO,IAAK;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACW,GAAG,CAAC,wBAAwBE,OAAO,GAAG,CAAC;;IAElE;IACA,OAAOC,QAAQ,CAACC,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,mBAAmB,GAAIhB,SAAS,IAAK;EAChD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,SAAS,CAAC;EAClC,OAAOF,GAAG,CAACM,IAAI,CAAC,6BAA6B,EAAEH,QAAQ,EAAE;IACvDI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMY,YAAY,GAAGA,CAAA,KAAM;EAChC,OAAOnB,GAAG,CAACW,GAAG,CAAC,2BAA2B,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,WAAW,GAAIP,OAAO,IAAK;EACtC,OAAOb,GAAG,CAACqB,MAAM,CAAC,4BAA4BR,OAAO,GAAG,CAAC;AAC3D,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,iBAAiB,GAAIC,UAAU,IAAK;EAC/C,MAAMpB,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;EAE/B;EACAmB,UAAU,CAACC,OAAO,CAACC,IAAI,IAAI;IACzBtB,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEoB,IAAI,CAAC;EAChC,CAAC,CAAC;EAEF,OAAOzB,GAAG,CAACM,IAAI,CAAC,2BAA2B,EAAEH,QAAQ,EAAE;IACrDI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}