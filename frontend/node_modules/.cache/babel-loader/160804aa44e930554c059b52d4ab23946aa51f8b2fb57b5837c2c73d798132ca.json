{"ast":null,"code":"import api from './index';\n\n/**\r\n * Create a directory in MFS\r\n * @param {string} path - The path of the directory to create\r\n * @returns {Promise} - API response\r\n */\nexport const createDirectory = path => {\n  return api.post('/api/images/mfs/mkdir/', {\n    path\n  });\n};\n\n/**\r\n * Write content to a file in MFS\r\n * @param {string} path - The path of the file to write\r\n * @param {File} file - The file to write\r\n * @param {Object} options - Additional options\r\n * @param {boolean} options.create - Whether to create the file if it doesn't exist\r\n * @param {boolean} options.truncate - Whether to truncate the file if it exists\r\n * @returns {Promise} - API response\r\n */\nexport const writeFile = (path, file, options = {\n  create: true,\n  truncate: true\n}) => {\n  const formData = new FormData();\n  formData.append('path', path);\n  formData.append('file', file);\n  formData.append('create', options.create.toString());\n  formData.append('truncate', options.truncate.toString());\n  return api.post('/api/images/mfs/write/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n/**\r\n * Read content from a file in MFS\r\n * @param {string} path - The path of the file to read\r\n * @param {boolean} download - Whether to download the file\r\n * @returns {Promise} - API response\r\n */\nexport const readFile = (path, download = false) => {\n  // For binary files, we need to use responseType: 'blob'\n  return api.get(`/api/images/mfs/read/?path=${encodeURIComponent(path)}&download=${download}`, {\n    responseType: 'blob'\n  });\n};\n\n/**\r\n * List contents of a directory in MFS\r\n * @param {string} path - The path of the directory to list\r\n * @returns {Promise} - API response with directory contents\r\n */\nexport const listDirectory = (path = '/') => {\n  return api.get(`/api/images/mfs/ls/?path=${encodeURIComponent(path)}`);\n};\n\n/**\r\n * Remove a file or directory from MFS\r\n * @param {string} path - The path of the file or directory to remove\r\n * @param {boolean} recursive - Whether to remove recursively\r\n * @returns {Promise} - API response\r\n */\nexport const removeFile = (path, recursive = false) => {\n  return api.delete(`/api/images/mfs/rm/?path=${encodeURIComponent(path)}&recursive=${recursive}`);\n};\n\n/**\r\n * Copy files in MFS\r\n * @param {string} source - The source path\r\n * @param {string} dest - The destination path\r\n * @returns {Promise} - API response\r\n */\nexport const copyFile = (source, dest) => {\n  return api.post('/api/images/mfs/cp/', {\n    source,\n    dest\n  });\n};\n\n/**\r\n * Move files in MFS\r\n * @param {string} source - The source path\r\n * @param {string} dest - The destination path\r\n * @returns {Promise} - API response\r\n */\nexport const moveFile = (source, dest) => {\n  return api.post('/api/images/mfs/mv/', {\n    source,\n    dest\n  });\n};\n\n/**\r\n * Get a URL for a file in MFS\r\n * @param {string} path - The path of the file\r\n * @returns {string} - URL for the file\r\n */\nexport const getFileUrl = path => {\n  return `/api/images/mfs/read/?path=${encodeURIComponent(path)}`;\n};","map":{"version":3,"names":["api","createDirectory","path","post","writeFile","file","options","create","truncate","formData","FormData","append","toString","headers","readFile","download","get","encodeURIComponent","responseType","listDirectory","removeFile","recursive","delete","copyFile","source","dest","moveFile","getFileUrl"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/api/mfs.js"],"sourcesContent":["import api from './index';\r\n\r\n/**\r\n * Create a directory in MFS\r\n * @param {string} path - The path of the directory to create\r\n * @returns {Promise} - API response\r\n */\r\nexport const createDirectory = (path) => {\r\n  return api.post('/api/images/mfs/mkdir/', { path });\r\n};\r\n\r\n/**\r\n * Write content to a file in MFS\r\n * @param {string} path - The path of the file to write\r\n * @param {File} file - The file to write\r\n * @param {Object} options - Additional options\r\n * @param {boolean} options.create - Whether to create the file if it doesn't exist\r\n * @param {boolean} options.truncate - Whether to truncate the file if it exists\r\n * @returns {Promise} - API response\r\n */\r\nexport const writeFile = (path, file, options = { create: true, truncate: true }) => {\r\n  const formData = new FormData();\r\n  formData.append('path', path);\r\n  formData.append('file', file);\r\n  formData.append('create', options.create.toString());\r\n  formData.append('truncate', options.truncate.toString());\r\n  \r\n  return api.post('/api/images/mfs/write/', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};\r\n\r\n/**\r\n * Read content from a file in MFS\r\n * @param {string} path - The path of the file to read\r\n * @param {boolean} download - Whether to download the file\r\n * @returns {Promise} - API response\r\n */\r\nexport const readFile = (path, download = false) => {\r\n  // For binary files, we need to use responseType: 'blob'\r\n  return api.get(`/api/images/mfs/read/?path=${encodeURIComponent(path)}&download=${download}`, {\r\n    responseType: 'blob'\r\n  });\r\n};\r\n\r\n/**\r\n * List contents of a directory in MFS\r\n * @param {string} path - The path of the directory to list\r\n * @returns {Promise} - API response with directory contents\r\n */\r\nexport const listDirectory = (path = '/') => {\r\n  return api.get(`/api/images/mfs/ls/?path=${encodeURIComponent(path)}`);\r\n};\r\n\r\n/**\r\n * Remove a file or directory from MFS\r\n * @param {string} path - The path of the file or directory to remove\r\n * @param {boolean} recursive - Whether to remove recursively\r\n * @returns {Promise} - API response\r\n */\r\nexport const removeFile = (path, recursive = false) => {\r\n  return api.delete(`/api/images/mfs/rm/?path=${encodeURIComponent(path)}&recursive=${recursive}`);\r\n};\r\n\r\n/**\r\n * Copy files in MFS\r\n * @param {string} source - The source path\r\n * @param {string} dest - The destination path\r\n * @returns {Promise} - API response\r\n */\r\nexport const copyFile = (source, dest) => {\r\n  return api.post('/api/images/mfs/cp/', { source, dest });\r\n};\r\n\r\n/**\r\n * Move files in MFS\r\n * @param {string} source - The source path\r\n * @param {string} dest - The destination path\r\n * @returns {Promise} - API response\r\n */\r\nexport const moveFile = (source, dest) => {\r\n  return api.post('/api/images/mfs/mv/', { source, dest });\r\n};\r\n\r\n/**\r\n * Get a URL for a file in MFS\r\n * @param {string} path - The path of the file\r\n * @returns {string} - URL for the file\r\n */\r\nexport const getFileUrl = (path) => {\r\n  return `/api/images/mfs/read/?path=${encodeURIComponent(path)}`;\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,SAAS;;AAEzB;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAIC,IAAI,IAAK;EACvC,OAAOF,GAAG,CAACG,IAAI,CAAC,wBAAwB,EAAE;IAAED;EAAK,CAAC,CAAC;AACrD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,SAAS,GAAGA,CAACF,IAAI,EAAEG,IAAI,EAAEC,OAAO,GAAG;EAAEC,MAAM,EAAE,IAAI;EAAEC,QAAQ,EAAE;AAAK,CAAC,KAAK;EACnF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAET,IAAI,CAAC;EAC7BO,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEN,IAAI,CAAC;EAC7BI,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEL,OAAO,CAACC,MAAM,CAACK,QAAQ,CAAC,CAAC,CAAC;EACpDH,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEL,OAAO,CAACE,QAAQ,CAACI,QAAQ,CAAC,CAAC,CAAC;EAExD,OAAOZ,GAAG,CAACG,IAAI,CAAC,wBAAwB,EAAEM,QAAQ,EAAE;IAClDI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAACZ,IAAI,EAAEa,QAAQ,GAAG,KAAK,KAAK;EAClD;EACA,OAAOf,GAAG,CAACgB,GAAG,CAAC,8BAA8BC,kBAAkB,CAACf,IAAI,CAAC,aAAaa,QAAQ,EAAE,EAAE;IAC5FG,YAAY,EAAE;EAChB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACjB,IAAI,GAAG,GAAG,KAAK;EAC3C,OAAOF,GAAG,CAACgB,GAAG,CAAC,4BAA4BC,kBAAkB,CAACf,IAAI,CAAC,EAAE,CAAC;AACxE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMkB,UAAU,GAAGA,CAAClB,IAAI,EAAEmB,SAAS,GAAG,KAAK,KAAK;EACrD,OAAOrB,GAAG,CAACsB,MAAM,CAAC,4BAA4BL,kBAAkB,CAACf,IAAI,CAAC,cAAcmB,SAAS,EAAE,CAAC;AAClG,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,QAAQ,GAAGA,CAACC,MAAM,EAAEC,IAAI,KAAK;EACxC,OAAOzB,GAAG,CAACG,IAAI,CAAC,qBAAqB,EAAE;IAAEqB,MAAM;IAAEC;EAAK,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAACF,MAAM,EAAEC,IAAI,KAAK;EACxC,OAAOzB,GAAG,CAACG,IAAI,CAAC,qBAAqB,EAAE;IAAEqB,MAAM;IAAEC;EAAK,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,UAAU,GAAIzB,IAAI,IAAK;EAClC,OAAO,8BAA8Be,kBAAkB,CAACf,IAAI,CAAC,EAAE;AACjE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}