{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Erwachens\\\\Desktop\\\\MyProject\\\\frontend\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { useImages } from '../context/ImageContext';\nimport Navbar from '../components/common/Navbar';\nimport { getIpfsUrl } from '../util/ipfs';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const {\n    myImages,\n    loading,\n    error,\n    getMyImages,\n    getImageDownloadLink,\n    pinAllImages,\n    pinImage,\n    unpinImage,\n    runGarbageCollection\n  } = useImages();\n  useEffect(() => {\n    // Fetch user's images when component mounts\n    getMyImages();\n  }, []);\n  const handleDownload = async imageId => {\n    try {\n      const response = await getImageDownloadLink(imageId);\n      console.log(`Download link response for image ${imageId}:`, response);\n\n      // Get the image from our state\n      const image = myImages.find(img => img.id === imageId);\n      if (!image) {\n        console.error(`Image ${imageId} not found in state`);\n        return;\n      }\n\n      // Get the best available URL (local or public)\n      let downloadUrl;\n      if (response.ipfsUrls && response.ipfsUrls.local) {\n        downloadUrl = response.ipfsUrls.local;\n        console.log(`Using local URL from response: ${downloadUrl}`);\n      } else if (response.ipfsUrl) {\n        // Fallback to the original URL if the new structure isn't available\n        downloadUrl = response.ipfsUrl;\n        console.log(`Using original URL from response: ${downloadUrl}`);\n      } else {\n        // If no URL is available, construct one from the hash using our utility\n        const hash = response.ipfsHash || image.ipfs_hash;\n        downloadUrl = getIpfsUrl(hash);\n        console.log(`Constructed URL from hash: ${downloadUrl}`);\n      }\n\n      // Create a temporary anchor element to trigger download\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.setAttribute('download', `image-${imageId}.jpg`);\n      link.setAttribute('target', '_blank');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      console.log(`Download initiated for image ${imageId}`);\n    } catch (err) {\n      console.error('Failed to get download link:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Welcome, \", user === null || user === void 0 ? void 0 : user.username, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Role: \", user === null || user === void 0 ? void 0 : user.role]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/upload\",\n            className: \"btn\",\n            children: \"Upload New Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/search\",\n            className: \"btn\",\n            style: {\n              marginLeft: '10px'\n            },\n            children: \"Search Similar Images\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/analytics\",\n            className: \"btn\",\n            style: {\n              marginLeft: '10px'\n            },\n            children: \"Analytics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            style: {\n              marginLeft: '10px'\n            },\n            onClick: async () => {\n              try {\n                const result = await pinAllImages();\n                alert(`Pin operation completed: ${result.newly_pinned} images newly pinned, ${result.already_pinned} were already pinned, ${result.failed_pins} failed.`);\n              } catch (err) {\n                console.error('Failed to pin images:', err);\n                alert('Failed to pin images. Please try again later.');\n              }\n            },\n            children: \"Pin All My Images\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), (user === null || user === void 0 ? void 0 : user.role) === 'admin' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              style: {\n                marginLeft: '10px',\n                backgroundColor: '#f0ad4e'\n              },\n              onClick: async () => {\n                if (window.confirm('Are you sure you want to run garbage collection? This will remove all unpinned content from the IPFS repository.')) {\n                  try {\n                    const result = await runGarbageCollection();\n                    alert(`Garbage collection completed successfully. Initial size: ${result.initial_size}, Final size: ${result.final_size}`);\n                  } catch (err) {\n                    console.error('Failed to run garbage collection:', err);\n                    alert('Failed to run garbage collection. Please try again later.');\n                  }\n                }\n              },\n              children: \"Reset IPFS Cache\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              style: {\n                marginLeft: '10px',\n                backgroundColor: '#17a2b8'\n              },\n              onClick: () => {\n                // Get date range for selective garbage collection\n                const startDate = prompt('Enter start date (YYYY-MM-DD) or leave empty:');\n                if (startDate === null) return; // User cancelled\n\n                const endDate = prompt('Enter end date (YYYY-MM-DD) or leave empty:');\n                if (endDate === null) return; // User cancelled\n\n                const params = {};\n                if (startDate) params.start_date = startDate;\n                if (endDate) params.end_date = endDate;\n                if (window.confirm(`Are you sure you want to run selective garbage collection${startDate ? ` from ${startDate}` : ''}${endDate ? ` to ${endDate}` : ''}? This will keep pinned only the images within the specified date range.`)) {\n                  try {\n                    runSelectiveGarbageCollection(params).then(result => {\n                      alert(`Selective garbage collection completed successfully. Kept ${result.kept_pins} images pinned, unpinned ${result.unpinned} images.`);\n                    }).catch(err => {\n                      console.error('Failed to run selective garbage collection:', err);\n                      alert('Failed to run selective garbage collection. Please try again later.');\n                    });\n                  } catch (err) {\n                    console.error('Failed to run selective garbage collection:', err);\n                    alert('Failed to run selective garbage collection. Please try again later.');\n                  }\n                }\n              },\n              children: \"Selective GC\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: '30px'\n        },\n        children: \"My Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), !loading && myImages.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You haven't uploaded any images yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-grid\",\n        children: myImages.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'relative'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              id: `img-${image.id}`,\n              src: getIpfsUrl(image.ipfs_hash),\n              alt: `ID: ${image.id}`,\n              style: {\n                width: '100%',\n                height: '200px',\n                objectFit: 'cover',\n                borderTopLeftRadius: '8px',\n                borderTopRightRadius: '8px'\n              },\n              onError: e => {\n                // If image fails to load, try to get the download link which will attempt to pin it\n                console.log(`Image ${image.id} failed to load, attempting to pin...`);\n                getImageDownloadLink(image.id).then(response => {\n                  if (response.isPinned) {\n                    console.log(`Image ${image.id} is now pinned, retrying load...`);\n                    // If now pinned, retry loading the image with force reload\n                    e.target.src = getIpfsUrl(image.ipfs_hash, true);\n                  } else {\n                    console.log(`Image ${image.id} is still not pinned, showing placeholder`);\n                    // If still not pinned, show placeholder\n                    e.target.onerror = null;\n                    e.target.src = 'https://via.placeholder.com/300x200?text=Image+Unavailable';\n                  }\n                }).catch(err => {\n                  console.error(`Error getting download link for image ${image.id}:`, err);\n                  // On error, show placeholder\n                  e.target.onerror = null;\n                  e.target.src = 'https://via.placeholder.com/300x200?text=Image+Unavailable';\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                position: 'absolute',\n                top: '5px',\n                right: '5px',\n                background: 'rgba(255, 255, 255, 0.7)',\n                border: 'none',\n                borderRadius: '50%',\n                width: '30px',\n                height: '30px',\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              },\n              onClick: () => {\n                // Show loading indicator\n                const imgElement = document.getElementById(`img-${image.id}`);\n                if (imgElement) {\n                  imgElement.style.opacity = '0.5';\n                }\n\n                // Get download link to ensure image is pinned\n                getImageDownloadLink(image.id).then(response => {\n                  console.log(`Refresh requested for image ${image.id}, pin status:`, response.isPinned);\n\n                  // Force reload the image\n                  if (imgElement) {\n                    imgElement.src = getIpfsUrl(image.ipfs_hash, true);\n                    imgElement.style.opacity = '1';\n                  }\n                }).catch(err => {\n                  console.error(`Error refreshing image ${image.id}:`, err);\n                  if (imgElement) {\n                    imgElement.style.opacity = '1';\n                  }\n                });\n              },\n              title: \"Refresh image\",\n              children: \"\\u21BB\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Image #\", image.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Hash: \", image.sha256_hash.substring(0, 10), \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Uploaded: \", new Date(image.uploaded_at).toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Deepfake: \", image.deepfake_label, \" (\", Math.round(image.deepfake_confidence * 100), \"%)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                marginBottom: '10px',\n                color: image.is_pinned ? '#28a745' : '#dc3545'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  display: 'inline-block',\n                  width: '10px',\n                  height: '10px',\n                  borderRadius: '50%',\n                  backgroundColor: image.is_pinned ? '#28a745' : '#dc3545',\n                  marginRight: '5px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: image.is_pinned ? 'Pinned' : 'Not Pinned'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"image-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                onClick: () => handleDownload(image.id),\n                children: \"Download\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 19\n              }, this), image.is_pinned ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                style: {\n                  marginLeft: '10px',\n                  backgroundColor: '#dc3545'\n                },\n                onClick: async () => {\n                  try {\n                    await unpinImage(image.id);\n                    alert(`Image #${image.id} has been unpinned.`);\n                  } catch (err) {\n                    console.error('Failed to unpin image:', err);\n                    alert('Failed to unpin image. Please try again later.');\n                  }\n                },\n                children: \"Unpin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                style: {\n                  marginLeft: '10px',\n                  backgroundColor: '#28a745'\n                },\n                onClick: async () => {\n                  try {\n                    await pinImage(image.id);\n                    alert(`Image #${image.id} has been pinned.`);\n                  } catch (err) {\n                    console.error('Failed to pin image:', err);\n                    alert('Failed to pin image. Please try again later.');\n                  }\n                },\n                children: \"Pin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 15\n          }, this)]\n        }, image.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"szlmmhxKQxrX1Wg0NTlr3/OviLs=\", false, function () {\n  return [useAuth, useImages];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","Link","useAuth","useImages","Navbar","getIpfsUrl","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","user","myImages","loading","error","getMyImages","getImageDownloadLink","pinAllImages","pinImage","unpinImage","runGarbageCollection","handleDownload","imageId","response","console","log","image","find","img","id","downloadUrl","ipfsUrls","local","ipfsUrl","hash","ipfsHash","ipfs_hash","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","err","children","fileName","_jsxFileName","lineNumber","columnNumber","className","username","role","style","marginTop","to","marginLeft","onClick","result","alert","newly_pinned","already_pinned","failed_pins","backgroundColor","window","confirm","initial_size","final_size","startDate","prompt","endDate","params","start_date","end_date","runSelectiveGarbageCollection","then","kept_pins","unpinned","catch","length","map","position","src","alt","width","height","objectFit","borderTopLeftRadius","borderTopRightRadius","onError","e","isPinned","target","onerror","top","right","background","border","borderRadius","cursor","display","alignItems","justifyContent","imgElement","getElementById","opacity","title","sha256_hash","substring","Date","uploaded_at","toLocaleString","deepfake_label","Math","round","deepfake_confidence","marginBottom","color","is_pinned","marginRight","_c","$RefreshReg$"],"sources":["C:/Users/Erwachens/Desktop/MyProject/frontend/src/pages/Dashboard.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { useImages } from '../context/ImageContext';\r\nimport Navbar from '../components/common/Navbar';\r\nimport { getIpfsUrl } from '../util/ipfs';\r\n\r\nconst Dashboard = () => {\r\n  const { user } = useAuth();\r\n  const { \r\n    myImages, \r\n    loading, \r\n    error, \r\n    getMyImages, \r\n    getImageDownloadLink,\r\n    pinAllImages,\r\n    pinImage,\r\n    unpinImage,\r\n    runGarbageCollection\r\n  } = useImages();\r\n\r\n  useEffect(() => {\r\n    // Fetch user's images when component mounts\r\n    getMyImages();\r\n  }, []);\r\n\r\n  const handleDownload = async (imageId) => {\r\n    try {\r\n      const response = await getImageDownloadLink(imageId);\r\n      console.log(`Download link response for image ${imageId}:`, response);\r\n      \r\n      // Get the image from our state\r\n      const image = myImages.find(img => img.id === imageId);\r\n      if (!image) {\r\n        console.error(`Image ${imageId} not found in state`);\r\n        return;\r\n      }\r\n      \r\n      // Get the best available URL (local or public)\r\n      let downloadUrl;\r\n      if (response.ipfsUrls && response.ipfsUrls.local) {\r\n        downloadUrl = response.ipfsUrls.local;\r\n        console.log(`Using local URL from response: ${downloadUrl}`);\r\n      } else if (response.ipfsUrl) {\r\n        // Fallback to the original URL if the new structure isn't available\r\n        downloadUrl = response.ipfsUrl;\r\n        console.log(`Using original URL from response: ${downloadUrl}`);\r\n      } else {\r\n        // If no URL is available, construct one from the hash using our utility\r\n        const hash = response.ipfsHash || image.ipfs_hash;\r\n        downloadUrl = getIpfsUrl(hash);\r\n        console.log(`Constructed URL from hash: ${downloadUrl}`);\r\n      }\r\n      \r\n      // Create a temporary anchor element to trigger download\r\n      const link = document.createElement('a');\r\n      link.href = downloadUrl;\r\n      link.setAttribute('download', `image-${imageId}.jpg`);\r\n      link.setAttribute('target', '_blank');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n      console.log(`Download initiated for image ${imageId}`);\r\n    } catch (err) {\r\n      console.error('Failed to get download link:', err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      \r\n      <div className=\"container\">\r\n        <div className=\"card\">\r\n          <h2>Welcome, {user?.username}!</h2>\r\n          <p>Role: {user?.role}</p>\r\n          \r\n          <div style={{ marginTop: '20px' }}>\r\n            <Link to=\"/upload\" className=\"btn\">Upload New Image</Link>\r\n            <Link to=\"/search\" className=\"btn\" style={{ marginLeft: '10px' }}>Search Similar Images</Link>\r\n            <Link to=\"/analytics\" className=\"btn\" style={{ marginLeft: '10px' }}>Analytics</Link>\r\n            <button \r\n              className=\"btn\" \r\n              style={{ marginLeft: '10px' }}\r\n              onClick={async () => {\r\n                try {\r\n                  const result = await pinAllImages();\r\n                  alert(`Pin operation completed: ${result.newly_pinned} images newly pinned, ${result.already_pinned} were already pinned, ${result.failed_pins} failed.`);\r\n                } catch (err) {\r\n                  console.error('Failed to pin images:', err);\r\n                  alert('Failed to pin images. Please try again later.');\r\n                }\r\n              }}\r\n            >\r\n              Pin All My Images\r\n            </button>\r\n            {user?.role === 'admin' && (\r\n              <>\r\n                <button \r\n                  className=\"btn\" \r\n                  style={{ marginLeft: '10px', backgroundColor: '#f0ad4e' }}\r\n                  onClick={async () => {\r\n                    if (window.confirm('Are you sure you want to run garbage collection? This will remove all unpinned content from the IPFS repository.')) {\r\n                      try {\r\n                        const result = await runGarbageCollection();\r\n                        alert(`Garbage collection completed successfully. Initial size: ${result.initial_size}, Final size: ${result.final_size}`);\r\n                      } catch (err) {\r\n                        console.error('Failed to run garbage collection:', err);\r\n                        alert('Failed to run garbage collection. Please try again later.');\r\n                      }\r\n                    }\r\n                  }}\r\n                >\r\n                  Reset IPFS Cache\r\n                </button>\r\n                <button \r\n                  className=\"btn\" \r\n                  style={{ marginLeft: '10px', backgroundColor: '#17a2b8' }}\r\n                  onClick={() => {\r\n                    // Get date range for selective garbage collection\r\n                    const startDate = prompt('Enter start date (YYYY-MM-DD) or leave empty:');\r\n                    if (startDate === null) return; // User cancelled\r\n                    \r\n                    const endDate = prompt('Enter end date (YYYY-MM-DD) or leave empty:');\r\n                    if (endDate === null) return; // User cancelled\r\n                    \r\n                    const params = {};\r\n                    if (startDate) params.start_date = startDate;\r\n                    if (endDate) params.end_date = endDate;\r\n                    \r\n                    if (window.confirm(`Are you sure you want to run selective garbage collection${startDate ? ` from ${startDate}` : ''}${endDate ? ` to ${endDate}` : ''}? This will keep pinned only the images within the specified date range.`)) {\r\n                      try {\r\n                        runSelectiveGarbageCollection(params)\r\n                          .then(result => {\r\n                            alert(`Selective garbage collection completed successfully. Kept ${result.kept_pins} images pinned, unpinned ${result.unpinned} images.`);\r\n                          })\r\n                          .catch(err => {\r\n                            console.error('Failed to run selective garbage collection:', err);\r\n                            alert('Failed to run selective garbage collection. Please try again later.');\r\n                          });\r\n                      } catch (err) {\r\n                        console.error('Failed to run selective garbage collection:', err);\r\n                        alert('Failed to run selective garbage collection. Please try again later.');\r\n                      }\r\n                    }\r\n                  }}\r\n                >\r\n                  Selective GC\r\n                </button>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        <h3 style={{ marginTop: '30px' }}>My Images</h3>\r\n        \r\n        {loading && (\r\n          <div className=\"spinner\"></div>\r\n        )}\r\n        \r\n        {error && (\r\n          <div className=\"alert alert-danger\">{error}</div>\r\n        )}\r\n        \r\n        {!loading && myImages.length === 0 && (\r\n          <div className=\"card\">\r\n            <p>You haven't uploaded any images yet.</p>\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"image-grid\">\r\n        {myImages.map((image) => (\r\n          <div key={image.id} className=\"image-card\">\r\n\r\n            <div style={{ position: 'relative' }}>\r\n              <img \r\n                id={`img-${image.id}`}\r\n                src={getIpfsUrl(image.ipfs_hash)}\r\n                alt={`ID: ${image.id}`}\r\n                style={{ \r\n                  width: '100%', \r\n                  height: '200px', \r\n                  objectFit: 'cover',\r\n                  borderTopLeftRadius: '8px',\r\n                  borderTopRightRadius: '8px'\r\n                }}\r\n                onError={(e) => {\r\n                  // If image fails to load, try to get the download link which will attempt to pin it\r\n                  console.log(`Image ${image.id} failed to load, attempting to pin...`);\r\n                  getImageDownloadLink(image.id)\r\n                    .then(response => {\r\n                      if (response.isPinned) {\r\n                        console.log(`Image ${image.id} is now pinned, retrying load...`);\r\n                        // If now pinned, retry loading the image with force reload\r\n                        e.target.src = getIpfsUrl(image.ipfs_hash, true);\r\n                      } else {\r\n                        console.log(`Image ${image.id} is still not pinned, showing placeholder`);\r\n                        // If still not pinned, show placeholder\r\n                        e.target.onerror = null;\r\n                        e.target.src = 'https://via.placeholder.com/300x200?text=Image+Unavailable';\r\n                      }\r\n                    })\r\n                    .catch((err) => {\r\n                      console.error(`Error getting download link for image ${image.id}:`, err);\r\n                      // On error, show placeholder\r\n                      e.target.onerror = null;\r\n                      e.target.src = 'https://via.placeholder.com/300x200?text=Image+Unavailable';\r\n                    });\r\n                }}\r\n              />\r\n              {/* Add a refresh button to retry loading the image */}\r\n              <button \r\n                style={{\r\n                  position: 'absolute',\r\n                  top: '5px',\r\n                  right: '5px',\r\n                  background: 'rgba(255, 255, 255, 0.7)',\r\n                  border: 'none',\r\n                  borderRadius: '50%',\r\n                  width: '30px',\r\n                  height: '30px',\r\n                  cursor: 'pointer',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center'\r\n                }}\r\n                onClick={() => {\r\n                  // Show loading indicator\r\n                  const imgElement = document.getElementById(`img-${image.id}`);\r\n                  if (imgElement) {\r\n                    imgElement.style.opacity = '0.5';\r\n                  }\r\n                  \r\n                  // Get download link to ensure image is pinned\r\n                  getImageDownloadLink(image.id)\r\n                    .then((response) => {\r\n                      console.log(`Refresh requested for image ${image.id}, pin status:`, response.isPinned);\r\n                      \r\n                      // Force reload the image\r\n                      if (imgElement) {\r\n                        imgElement.src = getIpfsUrl(image.ipfs_hash, true);\r\n                        imgElement.style.opacity = '1';\r\n                      }\r\n                    })\r\n                    .catch((err) => {\r\n                      console.error(`Error refreshing image ${image.id}:`, err);\r\n                      if (imgElement) {\r\n                        imgElement.style.opacity = '1';\r\n                      }\r\n                    });\r\n                }}\r\n                title=\"Refresh image\"\r\n              >\r\n                ↻\r\n              </button>\r\n            </div>\r\n              \r\n              <div className=\"image-info\">\r\n                <h3>Image #{image.id}</h3>\r\n                <p>Hash: {image.sha256_hash.substring(0, 10)}...</p>\r\n                <p>Uploaded: {new Date(image.uploaded_at).toLocaleString()}</p>\r\n                <p>Deepfake: {image.deepfake_label} ({Math.round(image.deepfake_confidence * 100)}%)</p>\r\n                \r\n                {/* Pin status indicator */}\r\n                <div style={{ \r\n                  display: 'flex', \r\n                  alignItems: 'center', \r\n                  marginBottom: '10px',\r\n                  color: image.is_pinned ? '#28a745' : '#dc3545'\r\n                }}>\r\n                  <span style={{ \r\n                    display: 'inline-block', \r\n                    width: '10px', \r\n                    height: '10px', \r\n                    borderRadius: '50%', \r\n                    backgroundColor: image.is_pinned ? '#28a745' : '#dc3545',\r\n                    marginRight: '5px'\r\n                  }}></span>\r\n                  <span>{image.is_pinned ? 'Pinned' : 'Not Pinned'}</span>\r\n                </div>\r\n                \r\n                <div className=\"image-actions\">\r\n                  <button \r\n                    className=\"btn\" \r\n                    onClick={() => handleDownload(image.id)}\r\n                  >\r\n                    Download\r\n                  </button>\r\n                  \r\n                  {/* Pin/Unpin button */}\r\n                  {image.is_pinned ? (\r\n                    <button \r\n                      className=\"btn\" \r\n                      style={{ marginLeft: '10px', backgroundColor: '#dc3545' }}\r\n                      onClick={async () => {\r\n                        try {\r\n                          await unpinImage(image.id);\r\n                          alert(`Image #${image.id} has been unpinned.`);\r\n                        } catch (err) {\r\n                          console.error('Failed to unpin image:', err);\r\n                          alert('Failed to unpin image. Please try again later.');\r\n                        }\r\n                      }}\r\n                    >\r\n                      Unpin\r\n                    </button>\r\n                  ) : (\r\n                    <button \r\n                      className=\"btn\" \r\n                      style={{ marginLeft: '10px', backgroundColor: '#28a745' }}\r\n                      onClick={async () => {\r\n                        try {\r\n                          await pinImage(image.id);\r\n                          alert(`Image #${image.id} has been pinned.`);\r\n                        } catch (err) {\r\n                          console.error('Failed to pin image:', err);\r\n                          alert('Failed to pin image. Please try again later.');\r\n                        }\r\n                      }}\r\n                    >\r\n                      Pin\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}