{"ast":null,"code":"/**\r\n * User: Get images uploaded by the current user\r\n * @returns {Promise} - API response with user's images\r\n */\nimport api from '../api/index'; // Importing the api instance\n\nexport const getMyImages = () => {\n  return api.get('/api/images/my-images/'); // Adjust the endpoint as necessary\n};\nexport const getImageUrl = async imageId => {\n  let token = localStorage.getItem('access_token'); // Get the token from local storage\n  if (!token) {\n    throw new Error('No access token found');\n  }\n\n  // Check if the token is expired and refresh it if necessary\n  try {\n    const decodedToken = jwt_decode(token);\n    const isExpired = decodedToken.exp * 1000 < Date.now(); // Check if token is expired\n    if (isExpired) {\n      token = await refreshAccessToken(); // Refresh the token\n    }\n  } catch (error) {\n    console.error('Error decoding token:', error);\n    throw new Error('Failed to refresh access token');\n  }\n\n  // Return URL with authentication token as a query parameter\n  return `${api.defaults.baseURL}/api/images/${imageId}/file/?token=${token}`;\n};\n\n/**\r\n * Upload an image to the server\r\n * @param {File} imageFile - The image file to upload\r\n * @returns {Promise} - API response with the uploaded image data\r\n */\nexport const uploadImage = imageFile => {\n  const formData = new FormData();\n  formData.append('file', imageFile);\n  return api.post('/api/images/upload/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n/**\r\n * Admin: Get recently verified images\r\n * @returns {Promise} - API response with recently verified images\r\n */\nexport const getVerifiedImages = () => {\n  return api.get('/api/images/admin/images/verified/');\n};\n\n/**\r\n * Admin: Get all images from all users\r\n * @returns {Promise} - API response with all images\r\n */\nexport const getAllImages = () => {\n  return api.get('/api/images/admin/images/');\n};\n\n/**\r\n * Admin: Delete an image\r\n * @param {number} imageId - The ID of the image to delete\r\n * @returns {Promise} - API response confirming deletion\r\n */\nexport const deleteImage = imageId => {\n  return api.delete(`/api/images/admin/images/${imageId}/`);\n};","map":{"version":3,"names":["api","getMyImages","get","getImageUrl","imageId","token","localStorage","getItem","Error","decodedToken","jwt_decode","isExpired","exp","Date","now","refreshAccessToken","error","console","defaults","baseURL","uploadImage","imageFile","formData","FormData","append","post","headers","getVerifiedImages","getAllImages","deleteImage","delete"],"sources":["F:/MyProject/frontend/src/api/images.js"],"sourcesContent":["/**\r\n * User: Get images uploaded by the current user\r\n * @returns {Promise} - API response with user's images\r\n */\r\nimport api from '../api/index'; // Importing the api instance\r\n\r\nexport const getMyImages = () => {\r\n  return api.get('/api/images/my-images/'); // Adjust the endpoint as necessary\r\n};\r\nexport const getImageUrl = async (imageId) => {\r\n  let token = localStorage.getItem('access_token'); // Get the token from local storage\r\n  if (!token) {\r\n      throw new Error('No access token found');\r\n  }\r\n\r\n  // Check if the token is expired and refresh it if necessary\r\n  try {\r\n      const decodedToken = jwt_decode(token);\r\n      const isExpired = decodedToken.exp * 1000 < Date.now(); // Check if token is expired\r\n      if (isExpired) {\r\n          token = await refreshAccessToken(); // Refresh the token\r\n      }\r\n  } catch (error) {\r\n      console.error('Error decoding token:', error);\r\n      throw new Error('Failed to refresh access token');\r\n  }\r\n\r\n  // Return URL with authentication token as a query parameter\r\n  return `${api.defaults.baseURL}/api/images/${imageId}/file/?token=${token}`;\r\n};\r\n\r\n\r\n/**\r\n * Upload an image to the server\r\n * @param {File} imageFile - The image file to upload\r\n * @returns {Promise} - API response with the uploaded image data\r\n */\r\nexport const uploadImage = (imageFile) => {\r\n  const formData = new FormData();\r\n  formData.append('file', imageFile);\r\n  return api.post('/api/images/upload/', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};\r\n\r\n\r\n/**\r\n * Admin: Get recently verified images\r\n * @returns {Promise} - API response with recently verified images\r\n */\r\nexport const getVerifiedImages = () => {\r\n  return api.get('/api/images/admin/images/verified/');\r\n};\r\n\r\n\r\n/**\r\n * Admin: Get all images from all users\r\n * @returns {Promise} - API response with all images\r\n */\r\nexport const getAllImages = () => {\r\n  return api.get('/api/images/admin/images/');\r\n};\r\n\r\n/**\r\n * Admin: Delete an image\r\n * @param {number} imageId - The ID of the image to delete\r\n * @returns {Promise} - API response confirming deletion\r\n */\r\nexport const deleteImage = (imageId) => {\r\n  return api.delete(`/api/images/admin/images/${imageId}/`);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,GAAG,MAAM,cAAc,CAAC,CAAC;;AAEhC,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAC/B,OAAOD,GAAG,CAACE,GAAG,CAAC,wBAAwB,CAAC,CAAC,CAAC;AAC5C,CAAC;AACD,OAAO,MAAMC,WAAW,GAAG,MAAOC,OAAO,IAAK;EAC5C,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;EAClD,IAAI,CAACF,KAAK,EAAE;IACR,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC;EAC5C;;EAEA;EACA,IAAI;IACA,MAAMC,YAAY,GAAGC,UAAU,CAACL,KAAK,CAAC;IACtC,MAAMM,SAAS,GAAGF,YAAY,CAACG,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC;IACxD,IAAIH,SAAS,EAAE;MACXN,KAAK,GAAG,MAAMU,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACxC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAM,IAAIR,KAAK,CAAC,gCAAgC,CAAC;EACrD;;EAEA;EACA,OAAO,GAAGR,GAAG,CAACkB,QAAQ,CAACC,OAAO,eAAef,OAAO,gBAAgBC,KAAK,EAAE;AAC7E,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMe,WAAW,GAAIC,SAAS,IAAK;EACxC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,SAAS,CAAC;EAClC,OAAOrB,GAAG,CAACyB,IAAI,CAAC,qBAAqB,EAAEH,QAAQ,EAAE;IAC/CI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ,CAAC;;AAGD;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EACrC,OAAO3B,GAAG,CAACE,GAAG,CAAC,oCAAoC,CAAC;AACtD,CAAC;;AAGD;AACA;AACA;AACA;AACA,OAAO,MAAM0B,YAAY,GAAGA,CAAA,KAAM;EAChC,OAAO5B,GAAG,CAACE,GAAG,CAAC,2BAA2B,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM2B,WAAW,GAAIzB,OAAO,IAAK;EACtC,OAAOJ,GAAG,CAAC8B,MAAM,CAAC,4BAA4B1B,OAAO,GAAG,CAAC;AAC3D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}